<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2020.1 (Build 209)" ts="2023-03-28 09:13:04">
<Class name="SPatient.SPatient2v123">
<Description>
FileNumber: 2  File Name: PATIENT

File Description:
The PATIENT file contains all the patients followed by the medical center/
Outpatient clinic.  At a minimum each patient entry must have a NAME, DATE
OF BIRTH and SOCIAL SECURITY NUMBER.  In order to add a new patient to the
PATIENT file the user must also indicate whether or not the patient is
requesting to receive care as a VETERAN of the U.S. Armed Forces and
specify the TYPE of patient being added to the system.  For the most
part the information contained in this file is demographic in nature,
i.e., address, employment, service history, etc., however data
concerning admissions, appointments,etc., is also stored in this file.
The ADMISSION sub-field is scheduled to be moved into the new PATIENT
MOVEMENT file by the end of calendar year 1989.  Care should be used
when removing a patient from the PATIENT file since virtually all
other DHCP modules do utilize data from this file.  Of the many fields
in the file you will note that many are preceeded by an asterisk.
Those fields are scheduled to be removed from the file due to either
lack of use or replacement by another field/file in the next release.
</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdPrivate>1</SqlRowIdPrivate>
<SqlTableName>SPatient_2_v123</SqlTableName>
<Super>%Persistent</Super>
<TimeChanged>66560,45011.449624</TimeChanged>
<TimeCreated>64842,45002.354879</TimeCreated>

<Property name="AgentOrangeExposureFlag">
<Description>
File Number: 2 Field Number :.32102
File Name: PATIENT Field Name: AGENT ORANGE EXPOS. INDICATED?
Field Type: SetOfCodes
Field Description:
For this veteran applicant enter 'Y' if s/he was exposed to the chemical
agent orange, 'N' if not, or 'U' if unknown.  Exposure cannot be claimed
unless the Period of Service (field .323) is answered VIETNAM ERA, which
entails those serving in the Korean DMZ between January 1, 1968 and
December 31, 1969 or Vietnam.
 
Once the service record has been verified only users who hold the
designated security key may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>AgentOrangeExposureFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="AgentOrangeExposureFlagCode">
<Description>
File Number: 2 Field Number :.32102
File Name: PATIENT Field Name: AGENT ORANGE EXPOS. INDICATED?
Field Type: SetOfCodes
Field Description:
For this veteran applicant enter 'Y' if s/he was exposed to the chemical
agent orange, 'N' if not, or 'U' if unknown.  Exposure cannot be claimed
unless the Period of Service (field .323) is answered VIETNAM ERA, which
entails those serving in the Korean DMZ between January 1, 1968 and
December 31, 1969 or Vietnam.
 
Once the service record has been verified only users who hold the
designated security key may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>AgentOrangeExposureFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="AgentOrangeLocationCode">
<Description>
File Number: 2 Field Number :.3213
File Name: PATIENT Field Name: AGENT ORANGE EXPOSURE LOCATION
Field Type: SetOfCodes
Field Description:
For this veteran applicant who was exposed to agent orange (EXPOSED TO
AGENT ORANGE prompt must be answered YES) enter the location where the
exposure occurred.  Once the service record has been verified only users
who hold the designated security key may enter/edit this field.  This
field cannot be deleted as long as agent orange exposure is indicated.
</Description>
<Type>%String</Type>
<SqlFieldName>AgentOrangeLocationCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="AgentOrangeLocationCodeCode">
<Description>
File Number: 2 Field Number :.3213
File Name: PATIENT Field Name: AGENT ORANGE EXPOSURE LOCATION
Field Type: SetOfCodes
Field Description:
For this veteran applicant who was exposed to agent orange (EXPOSED TO
AGENT ORANGE prompt must be answered YES) enter the location where the
exposure occurred.  Once the service record has been verified only users
who hold the designated security key may enter/edit this field.  This
field cannot be deleted as long as agent orange exposure is indicated.
</Description>
<Type>%String</Type>
<SqlFieldName>AgentOrangeLocationCodeCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="BadAddressIndicator">
<Description>
File Number: 2 Field Number :.121
File Name: PATIENT Field Name: BAD ADDRESS INDICATOR
Field Type: SetOfCodes
Field Description:
The Bad Address Indicator field applies to the address at which the patient
resides.  This field should be set as follows (if applicable):
 
    "UNDELIVERABLE" - Bad Address based on returned mail.
    "HOMELESS" - Patient is known to be homeless.
    "OTHER" - Other Bad Address Reason
 
Setting this field will prevent a Bad Address from being shared with HEC
and other VAMC facilities.
 
 
Once the Bad Address Indicator is set, incoming "newer" addresses will
automatically remove the Bad Address Indicator, and allow the "updated"
address to be transmitted to HEC and other VAMC facilities. To manually
remove the Bad Address Indicator enter the "@" symbol.
</Description>
<Type>%String</Type>
<SqlFieldName>BadAddressIndicator</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="BadAddressIndicatorCode">
<Description>
File Number: 2 Field Number :.121
File Name: PATIENT Field Name: BAD ADDRESS INDICATOR
Field Type: SetOfCodes
Field Description:
The Bad Address Indicator field applies to the address at which the patient
resides.  This field should be set as follows (if applicable):
 
    "UNDELIVERABLE" - Bad Address based on returned mail.
    "HOMELESS" - Patient is known to be homeless.
    "OTHER" - Other Bad Address Reason
 
Setting this field will prevent a Bad Address from being shared with HEC
and other VAMC facilities.
 
 
Once the Bad Address Indicator is set, incoming "newer" addresses will
automatically remove the Bad Address Indicator, and allow the "updated"
address to be transmitted to HEC and other VAMC facilities. To manually
remove the Bad Address Indicator enter the "@" symbol.
</Description>
<Type>%String</Type>
<SqlFieldName>BadAddressIndicatorCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="BirthDateTime">
<Description>
File Number: 2 Field Number :.03
File Name: PATIENT Field Name: DATE OF BIRTH
Field Type: DateTime
Field Description:
Enter the patient's DATE OF BIRTH which must be later than 12/31/1870.  
DATE OF BIRTH cannot be a date after the beneficiary 'Ineligible Date' 
or a date after the 'Enrollment Application Date'.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>BirthDateTime</SqlFieldName>
</Property>

<Property name="BirthFMDate">
<Description>
File Number: 2 Field Number :.03
File Name: PATIENT Field Name: DATE OF BIRTH
Field Type: DateTime
Field Description:
Enter the patient's DATE OF BIRTH which must be later than 12/31/1870.  
DATE OF BIRTH cannot be a date after the beneficiary 'Ineligible Date' 
or a date after the 'Enrollment Application Date'.
</Description>
<Type>%String</Type>
<SqlFieldName>BirthFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="City">
<Description>
File Number: 2 Field Number :.114
File Name: PATIENT Field Name: CITY
Field Type: FreeText
Field Description:
Enter the city in which this applicant resides [2-15 characters].
If the space provided is not sufficient please abbreviate the
city to the best of your ability.
</Description>
<Type>%String</Type>
<SqlFieldName>City</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="CollateralSponsorPatientIEN">
<Description>
File Number: 2 Field Number :.3601
File Name: PATIENT Field Name: COLLATERAL SPONSOR'S NAME
Field Type: Pointer PointsToFileNumber: 2
Field Description:
If this patient is a collateral responsible for picking up medications
or information regarding another patient, that patient's name should be 
entered here.
 
This sponsor must be a veteran and must exist in the patient file.
</Description>
<Type>%String</Type>
<SqlFieldName>CollateralSponsorPatientIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="CombatEligibilityEndDate">
<Description>
File Number: 2 Field Number :.5295
File Name: PATIENT Field Name: COMBAT VETERAN END DATE
Field Type: DateTime
Field Description:
This field represents the last day for combat vet eligibility. This field 
will only be populated by cross-reference when the veteran's combat vet 
eligibility has been determined. This value will remain after the combat 
vet eligibility period has expired.
</Description>
<Type>%FilemanDate</Type>
<SqlFieldName>CombatEligibilityEndDate</SqlFieldName>
</Property>

<Property name="CombatEligibilityEndFMDate">
<Description>
File Number: 2 Field Number :.5295
File Name: PATIENT Field Name: COMBAT VETERAN END DATE
Field Type: DateTime
Field Description:
This field represents the last day for combat vet eligibility. This field 
will only be populated by cross-reference when the veteran's combat vet 
eligibility has been determined. This value will remain after the combat 
vet eligibility period has expired.
</Description>
<Type>%String</Type>
<SqlFieldName>CombatEligibilityEndFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="CombatFlag">
<Description>
File Number: 2 Field Number :.5291
File Name: PATIENT Field Name: COMBAT SERVICE INDICATED?
Field Type: SetOfCodes
Field Description:
For this veteran applicant enter 'Y' if s/he served in a combat
zone, or 'N' if not.  Once the service record is verified only
users who hold the designated security key may enter/edit this
field.
</Description>
<Type>%String</Type>
<SqlFieldName>CombatFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="CombatFlagCode">
<Description>
File Number: 2 Field Number :.5291
File Name: PATIENT Field Name: COMBAT SERVICE INDICATED?
Field Type: SetOfCodes
Field Description:
For this veteran applicant enter 'Y' if s/he served in a combat
zone, or 'N' if not.  Once the service record is verified only
users who hold the designated security key may enter/edit this
field.
</Description>
<Type>%String</Type>
<SqlFieldName>CombatFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="CombatFromDate">
<Description>
File Number: 2 Field Number :.5293
File Name: PATIENT Field Name: COMBAT FROM DATE
Field Type: DateTime
Field Description:
For this veteran who served in a combat zone (IN COMBAT prompt
must be answered YES) enter the date on which combat service
commenced.  Once the service record is
verified only those users who hold the designated security key
may enter/edit this field.  This field cannot be deleted as long
as combat service is indicated.
</Description>
<Type>%FilemanDate</Type>
<SqlFieldName>CombatFromDate</SqlFieldName>
</Property>

<Property name="CombatFromFMDate">
<Description>
File Number: 2 Field Number :.5293
File Name: PATIENT Field Name: COMBAT FROM DATE
Field Type: DateTime
Field Description:
For this veteran who served in a combat zone (IN COMBAT prompt
must be answered YES) enter the date on which combat service
commenced.  Once the service record is
verified only those users who hold the designated security key
may enter/edit this field.  This field cannot be deleted as long
as combat service is indicated.
</Description>
<Type>%String</Type>
<SqlFieldName>CombatFromFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="CombatToDate">
<Description>
File Number: 2 Field Number :.5294
File Name: PATIENT Field Name: COMBAT TO DATE
Field Type: DateTime
Field Description:
For this veteran who served in a combat zone (IN COMBAT prompt must
be answered YES) enter the date on which combat service ended.
Once the service record is verified
only those users who hold the designated security key may
enter/edit this field.  This field cannot be deleted as long as
combat service is indicated.
</Description>
<Type>%FilemanDate</Type>
<SqlFieldName>CombatToDate</SqlFieldName>
</Property>

<Property name="CombatToFMDate">
<Description>
File Number: 2 Field Number :.5294
File Name: PATIENT Field Name: COMBAT TO DATE
Field Type: DateTime
Field Description:
For this veteran who served in a combat zone (IN COMBAT prompt must
be answered YES) enter the date on which combat service ended.
Once the service record is verified
only those users who hold the designated security key may
enter/edit this field.  This field cannot be deleted as long as
combat service is indicated.
</Description>
<Type>%String</Type>
<SqlFieldName>CombatToFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="CurrentEnrollmentIEN">
<Description>
File Number: 2 Field Number :27.01
File Name: PATIENT Field Name: CURRENT ENROLLMENT
Field Type: Pointer PointsToFileNumber: 27.11
Field Description:
The patient's current enrollment.
</Description>
<Type>%String</Type>
<SqlFieldName>CurrentEnrollmentIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="CurrentMeansTestStatusIEN">
<Description>
File Number: 2 Field Number :.14
File Name: PATIENT Field Name: CURRENT MEANS TEST STATUS
Field Type: Pointer PointsToFileNumber: 408.32
Field Description:
This field is computed by the system.  It contains the current
means test status for a patient.
</Description>
<Type>%String</Type>
<SqlFieldName>CurrentMeansTestStatusIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DeathDateTime">
<Description><![CDATA[
File Number: 2 Field Number :.351
File Name: PATIENT Field Name: DATE OF DEATH
Field Type: DateTime
Field Description:
Enter the date the patient died.  Date needs to be a precise date, i.e. 
a day, month, and year MUST be included.
Date of Death can not be prior to
        P&T Effective Date
        Date Ruled Incompetent (Civil and VA)
        Date of Birth
]]></Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>DeathDateTime</SqlFieldName>
</Property>

<Property name="DeathDocumentationType">
<Description>
File Number: 2 Field Number :.357
File Name: PATIENT Field Name: SUPPORTING DOCUMENT TYPE
Field Type: Pointer PointsToFileNumber: 47.75
Field Description:
The Supporting Document Type selected from the available list identifies 
the current method of how the site was notified of a patient's death.
</Description>
<Type>%String</Type>
<SqlFieldName>DeathDocumentationType</SqlFieldName>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DeathEnteredByStaffIEN">
<Description>
File Number: 2 Field Number :.352
File Name: PATIENT Field Name: DEATH ENTERED BY
Field Type: Pointer PointsToFileNumber: 200
Field Description:
This field records the date a patient's death was initially entered into
the DHCP system.  This field is created automatically by the MAS module
when a date of death is entered either through the 'Death Entry' option or
through the 'Discharge a Patient' option.
</Description>
<Type>%String</Type>
<SqlFieldName>DeathEnteredByStaffIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DeathFMDate">
<Description><![CDATA[
File Number: 2 Field Number :.351
File Name: PATIENT Field Name: DATE OF DEATH
Field Type: DateTime
Field Description:
Enter the date the patient died.  Date needs to be a precise date, i.e. 
a day, month, and year MUST be included.
Date of Death can not be prior to
        P&T Effective Date
        Date Ruled Incompetent (Civil and VA)
        Date of Birth
]]></Description>
<Type>%String</Type>
<SqlFieldName>DeathFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DeathLastUpdatedByStaffIEN">
<Description>
File Number: 2 Field Number :.355
File Name: PATIENT Field Name: LAST EDITED BY
Field Type: Pointer PointsToFileNumber: 200
Field Description:
This is the local user ID of the person that last made a modification to 
the date of death (.351) field.
</Description>
<Type>%String</Type>
<SqlFieldName>DeathLastUpdatedByStaffIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DeathModifiedDateTime">
<Description>
File Number: 2 Field Number :.354
File Name: PATIENT Field Name: DATE OF DEATH LAST UPDATED
Field Type: DateTime
Field Description:
This is a date/time value that represents the date/time the date of death 
field (.351) was last modified/entered/deleted.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>DeathModifiedDateTime</SqlFieldName>
</Property>

<Property name="DeathModifiedFMDate">
<Description>
File Number: 2 Field Number :.354
File Name: PATIENT Field Name: DATE OF DEATH LAST UPDATED
Field Type: DateTime
Field Description:
This is a date/time value that represents the date/time the date of death 
field (.351) was last modified/entered/deleted.
</Description>
<Type>%String</Type>
<SqlFieldName>DeathModifiedFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DeathNotificationSource">
<Description>
File Number: 2 Field Number :.353
File Name: PATIENT Field Name: SOURCE OF NOTIFICATION
Field Type: Pointer PointsToFileNumber: 47.76
Field Description:
SOURCE OF NOTIFICATION represents who/what notified the VA of the 
patient's DATE OF DEATH.
</Description>
<Type>%String</Type>
<SqlFieldName>DeathNotificationSource</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DestinationMergePatientIEN">
<Description>
File Number: 2 Field Number :.082
File Name: PATIENT Field Name: PATIENT MERGED TO
Field Type: Pointer PointsToFileNumber: 2
Field Description:
This field is currently not being utilized.  It will be active when
Patient Merge/Purge options are available to the user.  Patient Merged
To: field will be defined at that time.
|
</Description>
<Type>%String</Type>
<SqlFieldName>DestinationMergePatientIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DuplicateRecordStatus">
<Description>
File Number: 2 Field Number :.081
File Name: PATIENT Field Name: DUPLICATE STATUS
Field Type: SetOfCodes
Field Description:
This field is currently not being utilized.  It will be active when
Patient Merge/Purge options are available to the user.  Duplicate
Status field will be defined at that time.
|
</Description>
<Type>%String</Type>
<SqlFieldName>DuplicateRecordStatus</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DuplicateRecordStatusCode">
<Description>
File Number: 2 Field Number :.081
File Name: PATIENT Field Name: DUPLICATE STATUS
Field Type: SetOfCodes
Field Description:
This field is currently not being utilized.  It will be active when
Patient Merge/Purge options are available to the user.  Duplicate
Status field will be defined at that time.
|
</Description>
<Type>%String</Type>
<SqlFieldName>DuplicateRecordStatusCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityEnteredStaffIEN">
<Description>
File Number: 2 Field Number :.3616
File Name: PATIENT Field Name: ELIGIBILITY STATUS ENTERED BY
Field Type: Pointer PointsToFileNumber: 200
Field Description:
When eligibility is verified (ELIG STATUS="VERIFIED") the name of the
user who certified the verification.
</Description>
<Type>%String</Type>
<SqlFieldName>EligibilityEnteredStaffIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityIEN">
<Description><![CDATA[
File Number: 2 Field Number :.361
File Name: PATIENT Field Name: PRIMARY ELIGIBILITY CODE
Field Type: Pointer PointsToFileNumber: 8
Field Description:
Select from the available listing the appropriate eligibility code for
this applicant.  For non-veteran applicants a wide variety of choices
are available.  For veteran applicants the choices are screened [in the
following order] dependent on the responses to other prompts:
   
1.  If the SERVICE CONNECTED prompt (field .301) is answered YES
    only the following two choices are available:
    
    a.  If the SERVICE CONNECTED PERCENTAGE prompt (field .302) entered
        is 50% or greater 'SERVICE CONNECTED 50% TO 100%' can be
        selected.
   
    b.  Otherwise, the percentage is assumed to be less than 50% and
        only 'SC, LESS THAN 50%' may be entered.
   
2.  If the response to the WERE YOU A PRISONER OF WAR field (# .525)
    is YES and the veteran is not service connected, you must select 
    PRISONER OF WAR as the eligibility code.
   
3.  If the response to the CURRENT PH INDICATOR field (#.531) 
    is YES and the veteran is not service connected and is not a Prisoner
    of War, you must select PURPLE HEART RECIPIENT as the eligibility code.
 
4.  If the veteran is receiving VA benefits, but does not meet the
    criteria in items 1 and 2 above, then the following choices may
    be presented for selection:
 
    If RECEIVING A&A BENEFITS is answered YES, the eligibility code
    AID & ATTENDANCE may be selected.
 
    If the RECEIVING HOUSEBOUND BENEFITS is answered YES ,the eligibility
    code HOUSEBOUND may be selected.
 
    If the above two prompts were answered NO, but the RECEIVING A VA
    PENSION prompt was answered YES, only the NSC, VA PENSION prompt
    may be selected.
 
5.  If none of the above pertain to this veteran, then the NSC eligibility
    will be available for selection.
 
**  Dependent on the birthdate of the applicant, the following two
    eligibility codes may be displayed along with those shown in items
    3 through 5 above:  WORLD WAR I and MEXICAN BORDER WAR.  These would
    display for veterans not meeting the criteria in items 1 and 2, but
    whose date of birth is prior to 1907.
]]></Description>
<Type>%String</Type>
<SqlFieldName>EligibilityIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityInterimDateTime">
<Description>
File Number: 2 Field Number :.3614
File Name: PATIENT Field Name: ELIGIBILITY INTERIM RESPONSE
Field Type: DateTime
Field Description:
If an interim response has been received concerning this applicant's
eligibility status enter the date received.  Only users who hold the
designated security key may enter/edit this field.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>EligibilityInterimDateTime</SqlFieldName>
</Property>

<Property name="EligibilityInterimFMDate">
<Description>
File Number: 2 Field Number :.3614
File Name: PATIENT Field Name: ELIGIBILITY INTERIM RESPONSE
Field Type: DateTime
Field Description:
If an interim response has been received concerning this applicant's
eligibility status enter the date received.  Only users who hold the
designated security key may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>EligibilityInterimFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityStatus">
<Description>
File Number: 2 Field Number :.3611
File Name: PATIENT Field Name: ELIGIBILITY STATUS
Field Type: SetOfCodes
Field Description:
Select from the available listing the appropriate eligibility status
for this applicant.  Only users who hold the designated security key
may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>EligibilityStatus</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityStatusCode">
<Description>
File Number: 2 Field Number :.3611
File Name: PATIENT Field Name: ELIGIBILITY STATUS
Field Type: SetOfCodes
Field Description:
Select from the available listing the appropriate eligibility status
for this applicant.  Only users who hold the designated security key
may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>EligibilityStatusCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityStatusDateTime">
<Description>
File Number: 2 Field Number :.3612
File Name: PATIENT Field Name: ELIGIBILITY STATUS DATE
Field Type: DateTime
Field Description:
Enter the effective date of the eligibility status (ELIG STATUS
prompt).  Only users who hold the designated security key may
enter/edit this field.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>EligibilityStatusDateTime</SqlFieldName>
</Property>

<Property name="EligibilityStatusFMDate">
<Description>
File Number: 2 Field Number :.3612
File Name: PATIENT Field Name: ELIGIBILITY STATUS DATE
Field Type: DateTime
Field Description:
Enter the effective date of the eligibility status (ELIG STATUS
prompt).  Only users who hold the designated security key may
enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>EligibilityStatusFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityVACode">
<Description><![CDATA[
File Number: 2 Field Number :.361
File Name: PATIENT Field Name: PRIMARY ELIGIBILITY CODE
Field Type: Pointer PointsToFileNumber: 8
Field Description:
Select from the available listing the appropriate eligibility code for
this applicant.  For non-veteran applicants a wide variety of choices
are available.  For veteran applicants the choices are screened [in the
following order] dependent on the responses to other prompts:
   
1.  If the SERVICE CONNECTED prompt (field .301) is answered YES
    only the following two choices are available:
    
    a.  If the SERVICE CONNECTED PERCENTAGE prompt (field .302) entered
        is 50% or greater 'SERVICE CONNECTED 50% TO 100%' can be
        selected.
   
    b.  Otherwise, the percentage is assumed to be less than 50% and
        only 'SC, LESS THAN 50%' may be entered.
   
2.  If the response to the WERE YOU A PRISONER OF WAR field (# .525)
    is YES and the veteran is not service connected, you must select 
    PRISONER OF WAR as the eligibility code.
   
3.  If the response to the CURRENT PH INDICATOR field (#.531) 
    is YES and the veteran is not service connected and is not a Prisoner
    of War, you must select PURPLE HEART RECIPIENT as the eligibility code.
 
4.  If the veteran is receiving VA benefits, but does not meet the
    criteria in items 1 and 2 above, then the following choices may
    be presented for selection:
 
    If RECEIVING A&A BENEFITS is answered YES, the eligibility code
    AID & ATTENDANCE may be selected.
 
    If the RECEIVING HOUSEBOUND BENEFITS is answered YES ,the eligibility
    code HOUSEBOUND may be selected.
 
    If the above two prompts were answered NO, but the RECEIVING A VA
    PENSION prompt was answered YES, only the NSC, VA PENSION prompt
    may be selected.
 
5.  If none of the above pertain to this veteran, then the NSC eligibility
    will be available for selection.
 
**  Dependent on the birthdate of the applicant, the following two
    eligibility codes may be displayed along with those shown in items
    3 through 5 above:  WORLD WAR I and MEXICAN BORDER WAR.  These would
    display for veterans not meeting the criteria in items 1 and 2, but
    whose date of birth is prior to 1907.
]]></Description>
<Type>%String</Type>
<SqlFieldName>EligibilityVACode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityVerificationMethod">
<Description>
File Number: 2 Field Number :.3615
File Name: PATIENT Field Name: ELIGIBILITY VERIF. METHOD
Field Type: FreeText
Field Description:
Enter the method in which the eligibility for this applicant was verified
[between 2-50 characters].  Only users who hold the designated security
key may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>EligibilityVerificationMethod</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityVerificationSource">
<Description>
File Number: 2 Field Number :.3613
File Name: PATIENT Field Name: ELIGIBILITY VERIF. SOURCE
Field Type: SetOfCodes
Field Description:
This field is used to restrict site ability to edit certain data elements when
HEC has verified eligibility data.
</Description>
<Type>%String</Type>
<SqlFieldName>EligibilityVerificationSource</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EligibilityVerificationSourceCode">
<Description>
File Number: 2 Field Number :.3613
File Name: PATIENT Field Name: ELIGIBILITY VERIF. SOURCE
Field Type: SetOfCodes
Field Description:
This field is used to restrict site ability to edit certain data elements when
HEC has verified eligibility data.
</Description>
<Type>%String</Type>
<SqlFieldName>EligibilityVerificationSourceCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EmergencyResponseIndicator">
<Description>
File Number: 2 Field Number :.181
File Name: PATIENT Field Name: EMERGENCY RESPONSE INDICATOR
Field Type: SetOfCodes
Field Description:
Enter the appropriate ER Indicator to identify patients from impacted
zip code areas designated by FEMA.
</Description>
<Type>%String</Type>
<SqlFieldName>EmergencyResponseIndicator</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EmergencyResponseIndicatorCode">
<Description>
File Number: 2 Field Number :.181
File Name: PATIENT Field Name: EMERGENCY RESPONSE INDICATOR
Field Type: SetOfCodes
Field Description:
Enter the appropriate ER Indicator to identify patients from impacted
zip code areas designated by FEMA.
</Description>
<Type>%String</Type>
<SqlFieldName>EmergencyResponseIndicatorCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FFFEnteredDateTime">
<Description>
File Number: 2 Field Number :1100.03
File Name: PATIENT Field Name: FFF DATE ENTERED
Field Type: DateTime
Field Description:
Date/Time the FUGITIVE FELON FLAG field (#1100.01) was entered.  This 
field is automatically set when the FUGITIVE FELON FLAG field (#1100.01)
is set.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>FFFEnteredDateTime</SqlFieldName>
</Property>

<Property name="FFFEnteredFMDate">
<Description>
File Number: 2 Field Number :1100.03
File Name: PATIENT Field Name: FFF DATE ENTERED
Field Type: DateTime
Field Description:
Date/Time the FUGITIVE FELON FLAG field (#1100.01) was entered.  This 
field is automatically set when the FUGITIVE FELON FLAG field (#1100.01)
is set.
</Description>
<Type>%String</Type>
<SqlFieldName>FFFEnteredFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FFFEnteredStaffIEN">
<Description>
File Number: 2 Field Number :1100.02
File Name: PATIENT Field Name: FFF ENTERED BY
Field Type: Pointer PointsToFileNumber: 200
Field Description:
This field contains the user who entered the current Fugtitive Felon Flag
for this patient.  It is automatically entered when the FUGITIVE FELON
FLAG field (#1100.01) is entered.
</Description>
<Type>%String</Type>
<SqlFieldName>FFFEnteredStaffIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FFFRemovedDateTime">
<Description>
File Number: 2 Field Number :1100.05
File Name: PATIENT Field Name: FFF DATE REMOVED
Field Type: DateTime
Field Description:
Date/Time the FUGITIVE FELON FLAG Field (#1100.01) was removed.  This 
field is automatically set when the FUGITIVE FELON FLAG field (#1100.01)
is deleted.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>FFFRemovedDateTime</SqlFieldName>
</Property>

<Property name="FFFRemovedFMDate">
<Description>
File Number: 2 Field Number :1100.05
File Name: PATIENT Field Name: FFF DATE REMOVED
Field Type: DateTime
Field Description:
Date/Time the FUGITIVE FELON FLAG Field (#1100.01) was removed.  This 
field is automatically set when the FUGITIVE FELON FLAG field (#1100.01)
is deleted.
</Description>
<Type>%String</Type>
<SqlFieldName>FFFRemovedFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FFFRemovedReason">
<Description>
File Number: 2 Field Number :1100.09
File Name: PATIENT Field Name: FFF REMOVAL REMARKS
Field Type: FreeText
Field Description:
If the FFF flag has been cleared for this patient, this field contains a short reason as to why the flag was cleared.  This is a free text field which allows up to 80 characters to be entered.
</Description>
<Type>%String</Type>
<SqlFieldName>FFFRemovedReason</SqlFieldName>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="FFFRemovedStaffIEN">
<Description>
File Number: 2 Field Number :1100.04
File Name: PATIENT Field Name: FFF REMOVED BY
Field Type: Pointer PointsToFileNumber: 200
Field Description:
This field contains the user who removed the current Fugitive Felon Flag
for this patient.  It is automatically entered when the FUGITIVE FELON FLAG
field (#1100.01) is deleted.
</Description>
<Type>%String</Type>
<SqlFieldName>FFFRemovedStaffIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FederalAgencyIEN">
<Description>
File Number: 2 Field Number :.309
File Name: PATIENT Field Name: AGENCY/ALLIED COUNTRY
Field Type: Pointer PointsToFileNumber: 35
Field Description:
For this applicant whose eligibility code is either 'OTHER FEDERAL
AGENCY' or 'ALLIED VETERAN' select from the available listing
the federal agency or allied country, as appropriate, which best
classifies this applicant.
</Description>
<Type>%String</Type>
<SqlFieldName>FederalAgencyIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FilipinoVeteranCode">
<Description>
File Number: 2 Field Number :.3214
File Name: PATIENT Field Name: FILIPINO VETERAN PROOF
Field Type: SetOfCodes
Field Description:
Enter in this field the documentation that was provided in order to
establish US citizenship, lawful permanent US residency, and/or VA
Compensation at full-dollar rate for a Filipino Veteran (i.e., a 
veteran whose Branch of Service is F. Commonwealth, F. Guerilla, or F.
Scouts New)
</Description>
<Type>%String</Type>
<SqlFieldName>FilipinoVeteranCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FilipinoVeteranCodeCode">
<Description>
File Number: 2 Field Number :.3214
File Name: PATIENT Field Name: FILIPINO VETERAN PROOF
Field Type: SetOfCodes
Field Description:
Enter in this field the documentation that was provided in order to
establish US citizenship, lawful permanent US residency, and/or VA
Compensation at full-dollar rate for a Filipino Veteran (i.e., a 
veteran whose Branch of Service is F. Commonwealth, F. Guerilla, or F.
Scouts New)
</Description>
<Type>%String</Type>
<SqlFieldName>FilipinoVeteranCodeCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FugitiveFelonFlag">
<Description>
File Number: 2 Field Number :1100.01
File Name: PATIENT Field Name: FUGITIVE FELON FLAG
Field Type: SetOfCodes
Field Description:
This field is in support of Pub. L. 107-103, section 505, and is used to 
flag a patient who has a fugitive felon warrant outstanding.  This 
information will be provided to the appropriate personnel to enter.  
Access to this field requires the DGFFP ACCESS key.  This field should 
not be updated directly, but should be entered through the appropriate 
Fugitive Felon Program options.
</Description>
<Type>%String</Type>
<SqlFieldName>FugitiveFelonFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="FugitiveFelonFlagCode">
<Description>
File Number: 2 Field Number :1100.01
File Name: PATIENT Field Name: FUGITIVE FELON FLAG
Field Type: SetOfCodes
Field Description:
This field is in support of Pub. L. 107-103, section 505, and is used to 
flag a patient who has a fugitive felon warrant outstanding.  This 
information will be provided to the appropriate personnel to enter.  
Access to this field requires the DGFFP ACCESS key.  This field should 
not be updated directly, but should be entered through the appropriate 
Fugitive Felon Program options.
</Description>
<Type>%String</Type>
<SqlFieldName>FugitiveFelonFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Gender">
<Description>
File Number: 2 Field Number :.02
File Name: PATIENT Field Name: SEX
Field Type: SetOfCodes
Field Description:
Enter 'M' if this applicant is a male, or 'F' if female.
</Description>
<Type>%String</Type>
<SqlFieldName>Gender</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="GenderCode">
<Description>
File Number: 2 Field Number :.02
File Name: PATIENT Field Name: SEX
Field Type: SetOfCodes
Field Description:
Enter 'M' if this applicant is a male, or 'F' if female.
</Description>
<Type>%String</Type>
<SqlFieldName>GenderCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="GovernmentEmployeeFlag">
<Description>
File Number: 2 Field Number :.3112
File Name: PATIENT Field Name: GOVERNMENT AGENCY
Field Type: SetOfCodes
Field Description:
If this patient is currently employed by a government agency, respond yes
to this question.  If the patient is employed by the private sector or
currently is unemployed, respond no.
</Description>
<Type>%String</Type>
<SqlFieldName>GovernmentEmployeeFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="GovernmentEmployeeFlagCode">
<Description>
File Number: 2 Field Number :.3112
File Name: PATIENT Field Name: GOVERNMENT AGENCY
Field Type: SetOfCodes
Field Description:
If this patient is currently employed by a government agency, respond yes
to this question.  If the patient is employed by the private sector or
currently is unemployed, respond no.
</Description>
<Type>%String</Type>
<SqlFieldName>GovernmentEmployeeFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IneligibleCity">
<Description>
File Number: 2 Field Number :.1653
File Name: PATIENT Field Name: INELIGIBLE TWX CITY
Field Type: FreeText
Field Description:
Enter the city from which the TWX which informed you this applicant
was ineligible for treatment originated [3-30 characters].  An ineligible
date must be specified in order to enter/edit this field and the user
must hold the designated security key.  This field may not be deleted
as long as an ineligible date is on file.
</Description>
<Type>%String</Type>
<SqlFieldName>IneligibleCity</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IneligibleDateTime">
<Description>
File Number: 2 Field Number :.152
File Name: PATIENT Field Name: INELIGIBLE DATE
Field Type: DateTime
Field Description:
If this applicant is ineligible for treatment enter the effective date.
Only users who hold the designated security key may enter/edit this
field.  The Ineligible Date cannot be prior to the beneficiary Date of 
Birth.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>IneligibleDateTime</SqlFieldName>
</Property>

<Property name="IneligibleFMDate">
<Description>
File Number: 2 Field Number :.152
File Name: PATIENT Field Name: INELIGIBLE DATE
Field Type: DateTime
Field Description:
If this applicant is ineligible for treatment enter the effective date.
Only users who hold the designated security key may enter/edit this
field.  The Ineligible Date cannot be prior to the beneficiary Date of 
Birth.
</Description>
<Type>%String</Type>
<SqlFieldName>IneligibleFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IneligibleReason">
<Description>
File Number: 2 Field Number :.307
File Name: PATIENT Field Name: INELIGIBLE REASON
Field Type: FreeText
Field Description:
If this applicant is ineligible for treatment enter the reason
[not to exceed 40 characters].  An ineligible date must be specified
in order to enter/edit this field and the user must hold the
designated security key.  This field may not be deleted as long as
an ineligible date is on file.
</Description>
<Type>%String</Type>
<SqlFieldName>IneligibleReason</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IneligibleSource">
<Description>
File Number: 2 Field Number :.1651
File Name: PATIENT Field Name: INELIGIBLE TWX SOURCE
Field Type: SetOfCodes
Field Description:
Choose from the available listing the source of the TWX which
informed you that this applicant was ineligible for treatment.
An ineligible date must be specified in order to enter/edit this
field and the user must hold the designated security key.  This
field may not be deleted as long as an ineligible date is on file.
</Description>
<Type>%String</Type>
<SqlFieldName>IneligibleSource</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IneligibleSourceCode">
<Description>
File Number: 2 Field Number :.1651
File Name: PATIENT Field Name: INELIGIBLE TWX SOURCE
Field Type: SetOfCodes
Field Description:
Choose from the available listing the source of the TWX which
informed you that this applicant was ineligible for treatment.
An ineligible date must be specified in order to enter/edit this
field and the user must hold the designated security key.  This
field may not be deleted as long as an ineligible date is on file.
</Description>
<Type>%String</Type>
<SqlFieldName>IneligibleSourceCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IneligibleStateIEN">
<Description>
File Number: 2 Field Number :.1654
File Name: PATIENT Field Name: INELIGIBLE TWX STATE
Field Type: Pointer PointsToFileNumber: 5
Field Description:
Enter the state from which the TWX which informed you this applicant
was ineligible for treatment originated.  An ineligible date must be
specified in order to enter/edit this field and the user must hold
the designated security key.  This field may not be deleted as long
as an ineligible date is on file.
</Description>
<Type>%String</Type>
<SqlFieldName>IneligibleStateIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IneligibleVAROReason">
<Description>
File Number: 2 Field Number :.1656
File Name: PATIENT Field Name: INELIGIBLE VARO DECISION
Field Type: FreeText
Field Description:
Enter the VARO decision concerning this applicant's ineligibility
[between 3-75 characters].  An ineligible date must be specified in
order to enter/edit this field and the user must hold the designated
security key.  This field may not be deleted as long as an ineligible
date is on file.
</Description>
<Type>%String</Type>
<SqlFieldName>IneligibleVAROReason</SqlFieldName>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="InsuranceCoverageFlag">
<Description>
File Number: 2 Field Number :.3192
File Name: PATIENT Field Name: COVERED BY HEALTH INSURANCE?
Field Type: SetOfCodes
Field Description:
Enter 'Y' if this applicant is covered by a health insurance policy
regardless of who holds policy (applicant, spouse, employer, etc.),
'N' if s/he isn't covered by any policy, or 'U' if unknown.
</Description>
<Type>%String</Type>
<SqlFieldName>InsuranceCoverageFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="InsuranceCoverageFlagCode">
<Description>
File Number: 2 Field Number :.3192
File Name: PATIENT Field Name: COVERED BY HEALTH INSURANCE?
Field Type: SetOfCodes
Field Description:
Enter 'Y' if this applicant is covered by a health insurance policy
regardless of who holds policy (applicant, spouse, employer, etc.),
'N' if s/he isn't covered by any policy, or 'U' if unknown.
</Description>
<Type>%String</Type>
<SqlFieldName>InsuranceCoverageFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IonizingRadiationExposureFlag">
<Description>
File Number: 2 Field Number :.32103
File Name: PATIENT Field Name: RADIATION EXPOSURE INDICATED?
Field Type: SetOfCodes
Field Description:
Enter 'Y' if the veteran was exposed to ionizing radiation 1) at a
nuclear device testing site (e.g. the Pacific Islands, NM or NV) or
2) as a POW or while serving in Hiroshima and/or Nagasaki, Japan
from August 6, 1945 through July 1, 1946, or 3) served at
Department of Energy plants at Paducah, KY, Portsmouth, OH or
the K25 area at Oak Ridge, TN for at least 250 days before
February 1, 1992 or 4) served at Longshot, Milrow, or
Cannikin underground nuclear tests at Amchitka Island, AK
prior to January 1, 1974.  
 
Veterans exposed by method #3 or #4 are not eligible for 
copay exemption or enrollment in priority 6 based on their IR exposure.
 
Enter 'N' if not exposed or 'U' if unknown.
 
Once the record has been verified only HEC users 
may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>IonizingRadiationExposureFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="IonizingRadiationExposureFlagCode">
<Description>
File Number: 2 Field Number :.32103
File Name: PATIENT Field Name: RADIATION EXPOSURE INDICATED?
Field Type: SetOfCodes
Field Description:
Enter 'Y' if the veteran was exposed to ionizing radiation 1) at a
nuclear device testing site (e.g. the Pacific Islands, NM or NV) or
2) as a POW or while serving in Hiroshima and/or Nagasaki, Japan
from August 6, 1945 through July 1, 1946, or 3) served at
Department of Energy plants at Paducah, KY, Portsmouth, OH or
the K25 area at Oak Ridge, TN for at least 250 days before
February 1, 1992 or 4) served at Longshot, Milrow, or
Cannikin underground nuclear tests at Amchitka Island, AK
prior to January 1, 1974.  
 
Veterans exposed by method #3 or #4 are not eligible for 
copay exemption or enrollment in priority 6 based on their IR exposure.
 
Enter 'N' if not exposed or 'U' if unknown.
 
Once the record has been verified only HEC users 
may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>IonizingRadiationExposureFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="MaritalStatusIEN">
<Description>
File Number: 2 Field Number :.05
File Name: PATIENT Field Name: MARITAL STATUS
Field Type: Pointer PointsToFileNumber: 11
Field Description:
Select from the available listing this applicant's current
marital status.
</Description>
<Type>%String</Type>
<SqlFieldName>MaritalStatusIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="MedicaidEligibleFlag">
<Description>
File Number: 2 Field Number :.381
File Name: PATIENT Field Name: ELIGIBLE FOR MEDICAID?
Field Type: SetOfCodes
Field Description:
Enter yes if this patient is eligible to receive medicaid coverage.
Otherwise, answer no.
</Description>
<Type>%String</Type>
<SqlFieldName>MedicaidEligibleFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="MedicaidEligibleFlagCode">
<Description>
File Number: 2 Field Number :.381
File Name: PATIENT Field Name: ELIGIBLE FOR MEDICAID?
Field Type: SetOfCodes
Field Description:
Enter yes if this patient is eligible to receive medicaid coverage.
Otherwise, answer no.
</Description>
<Type>%String</Type>
<SqlFieldName>MedicaidEligibleFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="MedicaidInquireDateTime">
<Description>
File Number: 2 Field Number :.382
File Name: PATIENT Field Name: DATE MEDICAID LAST ASKED
Field Type: DateTime
Field Description:
Enter the date/time the 'ELIGIBLE FOR MEDICAID' question was last asked of
this veteran.  This data must be asked on a yearly basis as it affects the
requirement for a means test (a negative response results in a means test
not being required).
 
This field will be stored automatically by the MAS module when editing
data on registration or load/edit screen 7.  It will not appear for editing.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>MedicaidInquireDateTime</SqlFieldName>
</Property>

<Property name="MedicaidInquireFMDate">
<Description>
File Number: 2 Field Number :.382
File Name: PATIENT Field Name: DATE MEDICAID LAST ASKED
Field Type: DateTime
Field Description:
Enter the date/time the 'ELIGIBLE FOR MEDICAID' question was last asked of
this veteran.  This data must be asked on a yearly basis as it affects the
requirement for a means test (a negative response results in a means test
not being required).
 
This field will be stored automatically by the MAS module when editing
data on registration or load/edit screen 7.  It will not appear for editing.
</Description>
<Type>%String</Type>
<SqlFieldName>MedicaidInquireFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="MedicaidNumber">
<Description>
File Number: 2 Field Number :.383
File Name: PATIENT Field Name: MEDICAID NUMBER
Field Type: FreeText
Field Description:
This is the patient's assigned MEDICAID number.
</Description>
<Type>%String</Type>
<SqlFieldName>MedicaidNumber</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ODSRankType">
<Description>
File Number: 2 Field Number :11500.03
File Name: PATIENT Field Name: RANK
Field Type: Pointer PointsToFileNumber: 25002.1
Field Description:
Enter the grade/rank of this operation desert shield patient.
</Description>
<Type>%String</Type>
<SqlFieldName>ODSRankType</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ODSRecalledCode">
<Description>
File Number: 2 Field Number :11500.02
File Name: PATIENT Field Name: RECALLED TO ACTIVE DUTY
Field Type: SetOfCodes
Field Description:
Was this operation desert shield patient recalled to active duty?  If so
select from national guard or reserves.  If not, answer no.
</Description>
<Type>%String</Type>
<SqlFieldName>ODSRecalledCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ODSRecalledCodeCode">
<Description>
File Number: 2 Field Number :11500.02
File Name: PATIENT Field Name: RECALLED TO ACTIVE DUTY
Field Type: SetOfCodes
Field Description:
Was this operation desert shield patient recalled to active duty?  If so
select from national guard or reserves.  If not, answer no.
</Description>
<Type>%String</Type>
<SqlFieldName>ODSRecalledCodeCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ODSTreatmentDateTime">
<Description>
File Number: 2 Field Number :11500.01
File Name: PATIENT Field Name: INITIAL ODS TREATMENT RECEIVED
Field Type: DateTime
Field Description:
Enter the date/time this patient was initially entered as ODS.  This field
will automatically be created when ODS is selected as the PERIOD OF SERVICE
for this patient.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>ODSTreatmentDateTime</SqlFieldName>
</Property>

<Property name="ODSTreatmentFMDate">
<Description>
File Number: 2 Field Number :11500.01
File Name: PATIENT Field Name: INITIAL ODS TREATMENT RECEIVED
Field Type: DateTime
Field Description:
Enter the date/time this patient was initially entered as ODS.  This field
will automatically be created when ODS is selected as the PERIOD OF SERVICE
for this patient.
</Description>
<Type>%String</Type>
<SqlFieldName>ODSTreatmentFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="OpCode">
<Description>
If OpCode IS NOT NULL then the record is deleted on Vista.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="OperationDesertShieldRank">
<Description>
File Number: 2 Field Number :11500.03
File Name: PATIENT Field Name: RANK
Field Type: Pointer PointsToFileNumber: 25002.1
Field Description:
Enter the grade/rank of this operation desert shield patient.
</Description>
<Type>%String</Type>
<SqlFieldName>OperationDesertShieldRank</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="POWFlag">
<Description>
File Number: 2 Field Number :.525
File Name: PATIENT Field Name: POW STATUS INDICATED?
Field Type: SetOfCodes
Field Description:
For this veteran applicant enter 'Y' if s/he was confined as a prisoner
of war, 'N' if not, or 'U' if unknown.  Once the POW Status is verified 
by the HEC, it is no longer editable.
</Description>
<Type>%String</Type>
<SqlFieldName>POWFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="POWFlagCode">
<Description>
File Number: 2 Field Number :.525
File Name: PATIENT Field Name: POW STATUS INDICATED?
Field Type: SetOfCodes
Field Description:
For this veteran applicant enter 'Y' if s/he was confined as a prisoner
of war, 'N' if not, or 'U' if unknown.  Once the POW Status is verified 
by the HEC, it is no longer editable.
</Description>
<Type>%String</Type>
<SqlFieldName>POWFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="POWLocationIEN">
<Description>
File Number: 2 Field Number :.526
File Name: PATIENT Field Name: POW CONFINEMENT LOCATION
Field Type: Pointer PointsToFileNumber: 22
Field Description:
For this veteran applicant who was confined as a prisoner of war
(WERE YOU A PRISONER OF WAR prompt must be answered YES) enter the
war during which confined.  Once the service record is verified only
those users who hold the designated security key may enter/edit this
field.  This field cannot be deleted as long as applicant is
identified as a former POW.
</Description>
<Type>%String</Type>
<SqlFieldName>POWLocationIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientEnteredByStaffIEN">
<Description>
File Number: 2 Field Number :.096
File Name: PATIENT Field Name: WHO ENTERED PATIENT
Field Type: Pointer PointsToFileNumber: 200
Field Description:
The name of the user who first entered this applicant into the patient
file.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientEnteredByStaffIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientEnteredCode">
<Description>
File Number: 2 Field Number :.098
File Name: PATIENT Field Name: HOW WAS PATIENT ENTERED?
Field Type: SetOfCodes
Field Description:
How was the patient entered into the system.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientEnteredCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientEnteredCodeCode">
<Description>
File Number: 2 Field Number :.098
File Name: PATIENT Field Name: HOW WAS PATIENT ENTERED?
Field Type: SetOfCodes
Field Description:
How was the patient entered into the system.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientEnteredCodeCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientEnteredDateTime">
<Description>
File Number: 2 Field Number :.097
File Name: PATIENT Field Name: DATE ENTERED INTO FILE
Field Type: DateTime
Field Description:
This field stores the date this patient was initially stored into the
PATIENT file.  This is filled in automatically once a patient is
successfully added to the database.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>PatientEnteredDateTime</SqlFieldName>
</Property>

<Property name="PatientEnteredFMDate">
<Description>
File Number: 2 Field Number :.097
File Name: PATIENT Field Name: DATE ENTERED INTO FILE
Field Type: DateTime
Field Description:
This field stores the date this patient was initially stored into the
PATIENT file.  This is filled in automatically once a patient is
successfully added to the database.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientEnteredFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientEnteredRemark">
<Description>
File Number: 2 Field Number :.091
File Name: PATIENT Field Name: REMARKS
Field Type: FreeText
Field Description:
If so desired, you may enter a short remark about this applicant between
3-60 characters.  The remark entered should be significant and tact should
be exercised since this field is viewable to virtually all other users who
have the ability to 'call up' a patient for any purpose.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientEnteredRemark</SqlFieldName>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="PatientFirstName">
<Description>
File Number: 2 Field Number :.01
File Name: PATIENT Field Name: NAME
Field Type: FreeText
Field Description:
Enter the patient's name in 'LAST,FIRST MIDDLE SUFFIX' format.
This value must be 3-30 characters in length and may contain only uppercase
alpha characters, spaces, apostrophes, hyphens and one comma.  All other
characters and parenthetical text will be removed.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientFirstName</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientICN">
<Description>
File Number: 2 Field Number :991.01
File Name: PATIENT Field Name: INTEGRATION CONTROL NUMBER
Field Type: Numeric
Field Description:
Machine to machine identifier for a patient.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientICN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientIEN">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="PatientLastName">
<Description>
File Number: 2 Field Number :.01
File Name: PATIENT Field Name: NAME
Field Type: FreeText
Field Description:
Enter the patient's name in 'LAST,FIRST MIDDLE SUFFIX' format.
This value must be 3-30 characters in length and may contain only uppercase
alpha characters, spaces, apostrophes, hyphens and one comma.  All other
characters and parenthetical text will be removed.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientLastName</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientMissingCity">
<Description>
File Number: 2 Field Number :.1658
File Name: PATIENT Field Name: MISSING PERSON TWX CITY
Field Type: FreeText
Field Description:
If this patient is missing, enter the city where the TWX reporting the
patient as missing was originated.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientMissingCity</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientMissingDateTime">
<Description>
File Number: 2 Field Number :.153
File Name: PATIENT Field Name: MISSING PERSON DATE
Field Type: DateTime
Field Description:
This field contains the date this patient was initially listed as missing.
</Description>
<Type>%FilemanTimeStamp</Type>
<SqlFieldName>PatientMissingDateTime</SqlFieldName>
</Property>

<Property name="PatientMissingFMDate">
<Description>
File Number: 2 Field Number :.153
File Name: PATIENT Field Name: MISSING PERSON DATE
Field Type: DateTime
Field Description:
This field contains the date this patient was initially listed as missing.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientMissingFMDate</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientMissingSource">
<Description>
File Number: 2 Field Number :.1657
File Name: PATIENT Field Name: MISSING PERSON TWX SOURCE
Field Type: SetOfCodes
Field Description:
If this patient is missing, enter the source of the TWX that originally
listed the patient as missing.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientMissingSource</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientMissingSourceCode">
<Description>
File Number: 2 Field Number :.1657
File Name: PATIENT Field Name: MISSING PERSON TWX SOURCE
Field Type: SetOfCodes
Field Description:
If this patient is missing, enter the source of the TWX that originally
listed the patient as missing.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientMissingSourceCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientMissingStateIEN">
<Description>
File Number: 2 Field Number :.1659
File Name: PATIENT Field Name: MISSING PERSON TWX STATE
Field Type: Pointer PointsToFileNumber: 5
Field Description:
If this patient is missing, enter the state where the TWX reporting the
patient as missing was originated.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientMissingStateIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientName">
<Description>
File Number: 2 Field Number :.01
File Name: PATIENT Field Name: NAME
Field Type: FreeText
Field Description:
Enter the patient's name in 'LAST,FIRST MIDDLE SUFFIX' format.
This value must be 3-30 characters in length and may contain only uppercase
alpha characters, spaces, apostrophes, hyphens and one comma.  All other
characters and parenthetical text will be removed.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientName</SqlFieldName>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="PatientSSN">
<Description>
File Number: 2 Field Number :.09
File Name: PATIENT Field Name: SOCIAL SECURITY NUMBER
Field Type: FreeText
Field Description:
Answer with the individual's social security number.  Answer must be 9 
numbers in length. The SSN will be sent to the SSA for verification.  
This will be displayed next to the SSN.  Once an SSN has received a
status of Verified, it is locked from user updating and a "VERIFIED"
will be displayed by the SSN field.  Only the Identity Management Data
QUality Team are able to change a beneficiary's (veteran/non veteran)
SSN.  If an Invalid per SSA status is received for the SSN, then an
"INVALID" will appear next to the invalid SSN of the individual.
Facilities should make every effort to obtain the accurate SSN from the
individual for any invalid or pseudo SSN entry.
 
If a valid SSN is not known, then a "P" will be entered at the SSN
prompt for the system to automatically assign a Pseudo-SSN.  If a
Pseudo SSN is entered, a Reason for entering it will be required.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientSSN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientTypeIEN">
<Description>
File Number: 2 Field Number :391
File Name: PATIENT Field Name: TYPE
Field Type: Pointer PointsToFileNumber: 391
Field Description:
Enter the patient type for this patient.  This is selectable from the
distributed entries in the TYPE OF PATIENT file.  The type selected should
be the primary one selectable.  For example, if the patient is both an
NSC veteran and an employee, the patient type should be NSC VETERAN, not
employee.
 
This field is used by the registration screen processor to determine which
screens will be editable for this patient.  The selection of which screens
can be viewed for which types of patients can be made through the 'Patient
Type Update' option.
</Description>
<Type>%String</Type>
<SqlFieldName>PatientTypeIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PercentServiceConnect">
<Description>
File Number: 2 Field Number :.302
File Name: PATIENT Field Name: SERVICE CONNECTED PERCENTAGE
Field Type: Numeric
Field Description:
If this applicant is service connected (SERVICE CONNECTED prompt must
be answered YES) enter the service connected percentage [a number
between 0-100].  Once eligibility has been verified only users who hold
the designated security key may enter/edit this field.  Field may not be
deleted as long as service connection is indicated.
</Description>
<Type>%Integer</Type>
<SqlFieldName>PercentServiceConnect</SqlFieldName>
</Property>

<Property name="PeriodOfServiceIEN">
<Description>
File Number: 2 Field Number :.323
File Name: PATIENT Field Name: PERIOD OF SERVICE
Field Type: Pointer PointsToFileNumber: 21
Field Description:
From the available listing select the period of service which best
classifies this applicant.  The selections displayed are limited
based on the eligibility code which must have been entered in order
to select a period of service.  Once the service record is verified
only those users who hold the designated security key may enter/edit
this field.
</Description>
<Type>%String</Type>
<SqlFieldName>PeriodOfServiceIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PreferredInstitutionIEN">
<Description><![CDATA[
File Number: 2 Field Number :27.02
File Name: PATIENT Field Name: PREFERRED FACILITY
Field Type: Pointer PointsToFileNumber: 4
Field Description:
The facility that the patient chooses to designate as his preferred
location for care.
The facility must have one of the following facility types:
      CBOC         (Community Based Outpatient Clinic)
      HCS          (Health Care System)
      HEALTHCARE   (VA Boston Health Care System)
      M&ROC        (Medical and Regional Office Center)
      MOC          (Mobile Outpatient Clinic)
      MORC         (Mobile Outreach Clinic)
      NETWORK      (VA Healthcare Network Upstate NY)
      NHC          (Nursing Home Care)
      OC           (Outpatient Clinic - Independent)
      OCMC         (Outpatient Clinic - Subordinate)
      OCS          (Outpatient Clinic Substation)
      OPC          (Out Patient Clinic)
      ORC          (Outreach Clinic)
      RO-OC        (Regional Office - Outpatient Clinic)
      SATELLITE    (Satellite Outpatient Clinic)
      SOC          (Satellite Outpatient Clinic)
      VAMC         (VA Medical Center)
      VANPH        (Neural Psychiatric Hospital)
      VA ROSEBERG  (VA Roseburg Health Care System)
]]></Description>
<Type>%String</Type>
<SqlFieldName>PreferredInstitutionIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PreferredInstitutionSource">
<Description>
File Number: 2 Field Number :27.03
File Name: PATIENT Field Name: SOURCE DESIGNATION
Field Type: SetOfCodes
Field Description:
Source designation contains the value of the place the Preferred Facility 
field (#27.02) was assigned for the patient.  Source designation is 
automatically assigned by the system.  The VistA system can only assign 
a Preferred Facility if the current Source Designation is VistA or 
Primary Care Provider (PCP) Inactive.
</Description>
<Type>%String</Type>
<SqlFieldName>PreferredInstitutionSource</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PreferredInstitutionSourceCode">
<Description>
File Number: 2 Field Number :27.03
File Name: PATIENT Field Name: SOURCE DESIGNATION
Field Type: SetOfCodes
Field Description:
Source designation contains the value of the place the Preferred Facility 
field (#27.02) was assigned for the patient.  Source designation is 
automatically assigned by the system.  The VistA system can only assign 
a Preferred Facility if the current Source Designation is VistA or 
Primary Care Provider (PCP) Inactive.
</Description>
<Type>%String</Type>
<SqlFieldName>PreferredInstitutionSourceCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PseudoSSNReason">
<Description>
File Number: 2 Field Number :.0906
File Name: PATIENT Field Name: PSEUDO SSN REASON
Field Type: SetOfCodes
Field Description:
This field is used to document the reason the individual was assigned a 
pseudo SSN.  Based on your selection, the Pseudo SSN Report (Patient) 
option located in the Registration Menu can provide you a current 
report of the reasons entered at this prompt.  The following reasons
are available for selection:
 
Refused to Provide - use this reason when the individual was asked for 
his/her SSN and refused to provide the number.
 
SSN Unknown/Follow-up required - use this reason when the individual
is not available to ask/answer the request for SSN.  The facility
should initiate Follow-up activity to obtain the SSN.
 
No SSN Assigned - use this reason when the individual has not been
assigned an SSN. This generally applies to spouse or dependents of
veterans who are not US citizens and infrequently, non-citizen
beneficiaries.
</Description>
<Type>%String</Type>
<SqlFieldName>PseudoSSNReason</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PseudoSSNReasonCode">
<Description>
File Number: 2 Field Number :.0906
File Name: PATIENT Field Name: PSEUDO SSN REASON
Field Type: SetOfCodes
Field Description:
This field is used to document the reason the individual was assigned a 
pseudo SSN.  Based on your selection, the Pseudo SSN Report (Patient) 
option located in the Registration Menu can provide you a current 
report of the reasons entered at this prompt.  The following reasons
are available for selection:
 
Refused to Provide - use this reason when the individual was asked for 
his/her SSN and refused to provide the number.
 
SSN Unknown/Follow-up required - use this reason when the individual
is not available to ask/answer the request for SSN.  The facility
should initiate Follow-up activity to obtain the SSN.
 
No SSN Assigned - use this reason when the individual has not been
assigned an SSN. This generally applies to spouse or dependents of
veterans who are not US citizens and infrequently, non-citizen
beneficiaries.
</Description>
<Type>%String</Type>
<SqlFieldName>PseudoSSNReasonCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="RadiationExposureCode">
<Description>
File Number: 2 Field Number :.3212
File Name: PATIENT Field Name: RADIATION EXPOSURE METHOD
Field Type: SetOfCodes
Field Description:
This field represents the method by which the
exposure to ionizing radiation occurred.
</Description>
<Type>%String</Type>
<SqlFieldName>RadiationExposureCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="RadiationExposureCodeCode">
<Description>
File Number: 2 Field Number :.3212
File Name: PATIENT Field Name: RADIATION EXPOSURE METHOD
Field Type: SetOfCodes
Field Description:
This field represents the method by which the
exposure to ionizing radiation occurred.
</Description>
<Type>%String</Type>
<SqlFieldName>RadiationExposureCodeCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ReligionIEN">
<Description>
File Number: 2 Field Number :.08
File Name: PATIENT Field Name: RELIGIOUS PREFERENCE
Field Type: Pointer PointsToFileNumber: 13
Field Description:
Select from the available listing the religious preference of this
applicant.
</Description>
<Type>%String</Type>
<SqlFieldName>ReligionIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SHADFlag">
<Description>
File Number: 2 Field Number :.32115
File Name: PATIENT Field Name: PROJ 112/SHAD
Field Type: SetOfCodes
Field Description:
</Description>
<Type>%String</Type>
<SqlFieldName>SHADFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SHADFlagCode">
<Description>
File Number: 2 Field Number :.32115
File Name: PATIENT Field Name: PROJ 112/SHAD
Field Type: SetOfCodes
Field Description:
</Description>
<Type>%String</Type>
<SqlFieldName>SHADFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SSNVerificationStatus">
<Description>
File Number: 2 Field Number :.0907
File Name: PATIENT Field Name: SSN VERIFICATION STATUS
Field Type: SetOfCodes
Field Description:
This field designates whether or not the SSN has been verified. This field
will be received in the HL7 record.  It is not editable by the user.  Once
the SSN is verified by the SSA, it is no longer editable. 
</Description>
<Type>%String</Type>
<SqlFieldName>SSNVerificationStatus</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SSNVerificationStatusCode">
<Description>
File Number: 2 Field Number :.0907
File Name: PATIENT Field Name: SSN VERIFICATION STATUS
Field Type: SetOfCodes
Field Description:
This field designates whether or not the SSN has been verified. This field
will be received in the HL7 record.  It is not editable by the user.  Once
the SSN is verified by the SSA, it is no longer editable. 
</Description>
<Type>%String</Type>
<SqlFieldName>SSNVerificationStatusCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ScrSSN">
<Description>
File Number: 2 Field Number :.09
File Name: PATIENT Field Name: SOCIAL SECURITY NUMBER
Field Type: FreeText
Field Description:
Answer with the individual's social security number.  Answer must be 9 
numbers in length. The SSN will be sent to the SSA for verification.  
This will be displayed next to the SSN.  Once an SSN has received a
status of Verified, it is locked from user updating and a "VERIFIED"
will be displayed by the SSN field.  Only the Identity Management Data
QUality Team are able to change a beneficiary's (veteran/non veteran)
SSN.  If an Invalid per SSA status is received for the SSN, then an
"INVALID" will appear next to the invalid SSN of the individual.
Facilities should make every effort to obtain the accurate SSN from the
individual for any invalid or pseudo SSN entry.
 
If a valid SSN is not known, then a "P" will be entered at the SSN
prompt for the system to automatically assign a Pseudo-SSN.  If a
Pseudo SSN is entered, a Reason for entering it will be required.
</Description>
<Type>%String</Type>
<SqlFieldName>ScrSSN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SelfIdentifiedGender">
<Description>
File Number: 2 Field Number :.024
File Name: PATIENT Field Name: SELF IDENTIFIED GENDER
Field Type: SetOfCodes
Field Description:
This SELF IDENTIFIED GENDER value indicates the patient's view of their 
gender identity, if they choose to provide it.
</Description>
<Type>%String</Type>
<SqlFieldName>SelfIdentifiedGender</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SelfIdentifiedGenderCode">
<Description>
File Number: 2 Field Number :.024
File Name: PATIENT Field Name: SELF IDENTIFIED GENDER
Field Type: SetOfCodes
Field Description:
This SELF IDENTIFIED GENDER value indicates the patient's view of their 
gender identity, if they choose to provide it.
</Description>
<Type>%String</Type>
<SqlFieldName>SelfIdentifiedGenderCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SensitiveFlag">
<Description>
File Number: 38.1 Field Number :2
File Name: DG SECURITY LOG Field Name: SECURITY LEVEL
Field Type: SetOfCodes
Field Description:
This field contains a 1 if the patient record is presently listed as
sensitive or a 0 if the patient's record is not currently sensitive.
</Description>
<Type>%String</Type>
<SqlFieldName>SensitiveFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SensitiveFlagCode">
<Description>
File Number: 38.1 Field Number :2
File Name: DG SECURITY LOG Field Name: SECURITY LEVEL
Field Type: SetOfCodes
Field Description:
This field contains a 1 if the patient record is presently listed as
sensitive or a 0 if the patient's record is not currently sensitive.
</Description>
<Type>%String</Type>
<SqlFieldName>SensitiveFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ServiceConnectedFlag">
<Description>
File Number: 2 Field Number :.301
File Name: PATIENT Field Name: SERVICE CONNECTED?
Field Type: SetOfCodes
Field Description:
Enter 'Y' if this applicant is service connected, 'N' if not.
Applicants identified as being non-veterans cannot be entered
as service connected.  Once eligibility has been verified only
users holding the designated security key may enter/edit this
field.
</Description>
<Type>%String</Type>
<SqlFieldName>ServiceConnectedFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ServiceConnectedFlagCode">
<Description>
File Number: 2 Field Number :.301
File Name: PATIENT Field Name: SERVICE CONNECTED?
Field Type: SetOfCodes
Field Description:
Enter 'Y' if this applicant is service connected, 'N' if not.
Applicants identified as being non-veterans cannot be entered
as service connected.  Once eligibility has been verified only
users holding the designated security key may enter/edit this
field.
</Description>
<Type>%String</Type>
<SqlFieldName>ServiceConnectedFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SouthwestAsiaCondition">
<Description>
File Number: 2 Field Number :.322013
File Name: PATIENT Field Name: SOUTHWEST ASIA CONDITIONS?
Field Type: SetOfCodes
Field Description:
Enter "Y" if veteran claims need for care of conditions related to
service in SW Asia. Enter "N" if veteran did not serve in SW Asia or
does not claim need for care of conditions related to service in SW
Asia. Enter "U" when veteran served in SW Asia, but is unsure of
whether conditions may be related to that service. SW Asia Theater
of operations is defined as: Iraq, Kuwait, Saudi Arabia, the neutral
zone between Iraq and Saudi Arabia, Bahrain, Qatar, the United Arab
Emirates, Oman, the Gulf of Aden, the Gulf of Oman, the Persian Gulf,
the Arabian Sea, the Red Sea, and the airspace above these locations.
</Description>
<Type>%String</Type>
<SqlFieldName>SouthwestAsiaCondition</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SouthwestAsiaConditionCode">
<Description>
File Number: 2 Field Number :.322013
File Name: PATIENT Field Name: SOUTHWEST ASIA CONDITIONS?
Field Type: SetOfCodes
Field Description:
Enter "Y" if veteran claims need for care of conditions related to
service in SW Asia. Enter "N" if veteran did not serve in SW Asia or
does not claim need for care of conditions related to service in SW
Asia. Enter "U" when veteran served in SW Asia, but is unsure of
whether conditions may be related to that service. SW Asia Theater
of operations is defined as: Iraq, Kuwait, Saudi Arabia, the neutral
zone between Iraq and Saudi Arabia, Bahrain, Qatar, the United Arab
Emirates, Oman, the Gulf of Aden, the Gulf of Oman, the Persian Gulf,
the Arabian Sea, the Red Sea, and the airspace above these locations.
</Description>
<Type>%String</Type>
<SqlFieldName>SouthwestAsiaConditionCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Sta3n">
<Description>
The three digit station number for the record.</Description>
<Type>%SmallInt</Type>
<Required>1</Required>
</Property>

<Property name="StateCountyIEN">
<Description>
File Number: 2 Field Number :.117
File Name: PATIENT Field Name: COUNTY
Field Type: Numeric
Field Description:
If a state of residence is entered select from the available
listing the county in which this applicant resides.  If no
state (or a non-state) is entered no selection is possible.
</Description>
<Type>%String</Type>
<SqlFieldName>StateCountyIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="StateIEN">
<Description>
File Number: 2 Field Number :.115
File Name: PATIENT Field Name: STATE
Field Type: Pointer PointsToFileNumber: 5
Field Description:
From the available listing choose the state in which this applicant
resides.
</Description>
<Type>%String</Type>
<SqlFieldName>StateIEN</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="StreetAddress1">
<Description>
File Number: 2 Field Number :.111
File Name: PATIENT Field Name: STREET ADDRESS [LINE 1]
Field Type: FreeText
Field Description:
Enter the first line of this applicant's residence street address
[3-35 characters].
</Description>
<Type>%String</Type>
<SqlFieldName>StreetAddress1</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="StreetAddress2">
<Description>
File Number: 2 Field Number :.112
File Name: PATIENT Field Name: STREET ADDRESS [LINE 2]
Field Type: FreeText
Field Description:
Enter the second line of this applicant's residence street address
[3-30 characters] if the space provided in 'street address' was
not sufficient.
</Description>
<Type>%String</Type>
<SqlFieldName>StreetAddress2</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="TestPatientFlag">
<Description>
File Number: 2 Field Number :.6
File Name: PATIENT Field Name: TEST PATIENT INDICATOR
Field Type: SetOfCodes
Field Description:
This field is set by the 'ATP' cross reference on the Social Security Number 
field (.09) when an SSN containing five leading zeros is entered.
</Description>
<Type>%String</Type>
<SqlFieldName>TestPatientFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="TestPatientFlagCode">
<Description>
File Number: 2 Field Number :.6
File Name: PATIENT Field Name: TEST PATIENT INDICATOR
Field Type: SetOfCodes
Field Description:
This field is set by the 'ATP' cross reference on the Social Security Number 
field (.09) when an SSN containing five leading zeros is entered.
</Description>
<Type>%String</Type>
<SqlFieldName>TestPatientFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="VeteranFlag">
<Description>
File Number: 2 Field Number :1901
File Name: PATIENT Field Name: VETERAN (Y/N)?
Field Type: SetOfCodes
Field Description:
Enter 'Y' if this applicant is over 17 years of age and is a veteran,
'N' if not.  If applicant is under 17 years of age and is a veteran
only those users holding the designated security may identify him/her
as a veteran.  Once eligibility is verified only those users who
hold the designated security key may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>VeteranFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="VeteranFlagCode">
<Description>
File Number: 2 Field Number :1901
File Name: PATIENT Field Name: VETERAN (Y/N)?
Field Type: SetOfCodes
Field Description:
Enter 'Y' if this applicant is over 17 years of age and is a veteran,
'N' if not.  If applicant is under 17 years of age and is a veteran
only those users holding the designated security may identify him/her
as a veteran.  Once eligibility is verified only those users who
hold the designated security key may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>VeteranFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="VeteranTransportationProgramFlag">
<Description>
File Number: 2 Field Number :3000
File Name: PATIENT Field Name: VTS PATIENT FLAG
Field Type: SetOfCodes
Field Description:
 This field indicates whether or not the patient is or wants to be part of the Veteran 
Transportation Service (VTS).
</Description>
<Type>%String</Type>
<SqlFieldName>VeteranTransportationProgramFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="VeteranTransportationProgramFlagCode">
<Description>
File Number: 2 Field Number :3000
File Name: PATIENT Field Name: VTS PATIENT FLAG
Field Type: SetOfCodes
Field Description:
 This field indicates whether or not the patient is or wants to be part of the Veteran 
Transportation Service (VTS).
</Description>
<Type>%String</Type>
<SqlFieldName>VeteranTransportationProgramFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="VietnamServiceFlag">
<Description>
File Number: 2 Field Number :.32101
File Name: PATIENT Field Name: VIETNAM SERVICE INDICATED?
Field Type: SetOfCodes
Field Description:
For this veteran applicant enter 'Y' if s/he actually served in the
Republic of Vietnam, 'N' if not, or 'U' if unknown.  Once the service
record has been verified only users who hold the designated security
key may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>VietnamServiceFlag</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="VietnamServiceFlagCode">
<Description>
File Number: 2 Field Number :.32101
File Name: PATIENT Field Name: VIETNAM SERVICE INDICATED?
Field Type: SetOfCodes
Field Description:
For this veteran applicant enter 'Y' if s/he actually served in the
Republic of Vietnam, 'N' if not, or 'U' if unknown.  Once the service
record has been verified only users who hold the designated security
key may enter/edit this field.
</Description>
<Type>%String</Type>
<SqlFieldName>VietnamServiceFlagCode</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="VistaCreateDate">
<Description>
If 1900-01-01 then created by Historical Pull.
Otherwise the date (UTC date/time) the record was added.</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="VistaEditDate">
<Description>
The last time (UTC date/time) the record was updated.</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Zip">
<Description>
File Number: 2 Field Number :.116
File Name: PATIENT Field Name: ZIP CODE
Field Type: FreeText
Field Description:
Enter the zip code [5 numerics] for the city in which this applicant
resides.
</Description>
<Type>%String</Type>
<SqlFieldName>Zip</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Zip4">
<Description>
File Number: 2 Field Number :.1112
File Name: PATIENT Field Name: ZIP+4
Field Type: FreeText
Field Description:
Answer with either the 5 digit format (e.g. 12345) or the nine digit
format (e.g. 12345-6789 or 123456789).
</Description>
<Type>%String</Type>
<SqlFieldName>Zip4</SqlFieldName>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Index name="MainIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Sta3n,PatientIEN</Properties>
<Unique>1</Unique>
</Index>

<Index name="PatientICNIndex">
<Properties>Sta3n,PatientIEN</Properties>
</Index>

<Index name="PatientICNOnlyIndex">
<Properties>PatientICN</Properties>
</Index>

<Index name="PatientSSNIndex">
<Properties>PatientSSN</Properties>
</Index>

<Index name="PatientEnteredByStaffIENIndex">
<Properties>PatientEnteredByStaffIEN</Properties>
</Index>

<Index name="VistaEditDateIndex">
<Properties>VistaEditDate</Properties>
</Index>

<Method name="BuildSite">
<ClassMethod>1</ClassMethod>
<FormalSpec>Sta3n:%Integer,StartIEN:%String=0</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Write Sta3n,!,$ZDateTime($H,3),!
	Set VistaSite=##class(VX130.VistaSite).%OpenId(Sta3n)
	Set NS=VistaSite.VistaSiteNamespace
	Set LastIEN=""
	Set Count=0
	Set PatientIEN=$Order(^|NS|DPT(StartIEN))
	While (+PatientIEN) {
		Set LastIEN=PatientIEN
		Set Count=Count+1
		Set Status=..UpdateObject(Sta3n,PatientIEN,0,1)
		Do:'(+Status) ##class(VX130.FilingErrors).AddError(VistaSite,..%ClassName(1),LastIEN,Status)
		If '(Count#10000) Do ##class(VX130.HistoricalPullHistory).UpdateHPStatus(..%ClassName(1),Sta3n,LastIEN)
		Set PatientIEN=$Order(^|NS|DPT(PatientIEN))
	}
	Do ##class(VX130.HistoricalPullHistory).FinishHP(..%ClassName(1),Sta3n,LastIEN)
	Quit
]]></Implementation>
</Method>

<Method name="CheckVISTAToVX130">
<ClassMethod>1</ClassMethod>
<FormalSpec>Sta3n:%Integer,StartIEN:%String=0,EndIEN:%Integer=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Write Sta3n,!,$ZDateTime($H,3),!
	Set VistaSite=##class(VX130.VistaSite).%OpenId(Sta3n)
	Set NS=VistaSite.VistaSiteNamespace
	Set LastIEN=""
	Set Count=0
	Set PatientIEN=$Order(^|NS|DPT(StartIEN))
	While (+PatientIEN) {
		Quit:$Select(EndIEN]"":(+PatientIEN>(EndIEN+1)),1:0)
		Set LastIEN=PatientIEN
		Set Count=Count+1
		Set Status=..UpdateObject(Sta3n,PatientIEN,1,0)
		Do:'(+Status) ##class(VX130.FilingErrors).AddError(VistaSite,..%ClassName(1),LastIEN,Status)
		If '(Count#10000) Do ##class(QC.QualityCheckHistory).UpdateDQStatus("VISTA",Sta3n,..%ClassName(1),LastIEN)
		Set PatientIEN=$Order(^|NS|DPT(PatientIEN))
	}
	Do ##class(QC.QualityCheckHistory).UpdateDQStatus("VISTA",Sta3n,..%ClassName(1),LastIEN)
	Do ##class(QC.QualityCheckHistory).EndQualityCheck("VISTA",Sta3n,..%ClassName(1))
	Quit
]]></Implementation>
</Method>

<Method name="FlatFileHeader">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "Sta3n^PatientIEN^PatientFirstName^PatientLastName^PatientName^Gender^GenderCode^BirthDateTime^BirthFMDate^MaritalStatusIEN^ReligionIEN^DuplicateRecordStatus^DuplicateRecordStatusCode^DestinationMergePatientIEN^PatientSSN^ScrSSN^PseudoSSNReason^PseudoSSNReasonCode^SSNVerificationStatus^SSNVerificationStatusCode^PatientEnteredRemark^PatientEnteredByStaffIEN^PatientEnteredDateTime^PatientEnteredFMDate^PatientEnteredCode^PatientEnteredCodeCode^StreetAddress1^Zip4^StreetAddress2^City^StateIEN^Zip^StateCountyIEN^BadAddressIndicator^BadAddressIndicatorCode^CurrentMeansTestStatusIEN^IneligibleDateTime^IneligibleFMDate^PatientMissingDateTime^PatientMissingFMDate^IneligibleSource^IneligibleSourceCode^IneligibleCity^IneligibleStateIEN^IneligibleVAROReason^PatientMissingSource^PatientMissingSourceCode^PatientMissingCity^PatientMissingStateIEN^EmergencyResponseIndicator^EmergencyResponseIndicatorCode^ServiceConnectedFlag^ServiceConnectedFlagCode^PercentServiceConnect^IneligibleReason^FederalAgencyIEN^GovernmentEmployeeFlag^GovernmentEmployeeFlagCode^InsuranceCoverageFlag^InsuranceCoverageFlagCode^VietnamServiceFlag^VietnamServiceFlagCode^AgentOrangeExposureFlag^AgentOrangeExposureFlagCode^IonizingRadiationExposureFlag^IonizingRadiationExposureFlagCode^SHADFlag^SHADFlagCode^RadiationExposureCode^RadiationExposureCodeCode^AgentOrangeLocationCode^AgentOrangeLocationCodeCode^FilipinoVeteranCode^FilipinoVeteranCodeCode^SouthwestAsiaCondition^SouthwestAsiaConditionCode^PeriodOfServiceIEN^DeathDateTime^DeathFMDate^DeathEnteredByStaffIEN^DeathNotificationSource^DeathModifiedDateTime^DeathModifiedFMDate^DeathLastUpdatedByStaffIEN^CollateralSponsorPatientIEN^EligibilityIEN^EligibilityVACode^EligibilityStatus^EligibilityStatusCode^EligibilityStatusDateTime^EligibilityStatusFMDate^EligibilityVerificationSource^EligibilityVerificationSourceCode^EligibilityInterimDateTime^EligibilityInterimFMDate^EligibilityVerificationMethod^EligibilityEnteredStaffIEN^MedicaidEligibleFlag^MedicaidEligibleFlagCode^MedicaidInquireDateTime^MedicaidInquireFMDate^MedicaidNumber^POWFlag^POWFlagCode^POWLocationIEN^CombatFlag^CombatFlagCode^CombatFromDate^CombatFromFMDate^CombatToDate^CombatToFMDate^CombatEligibilityEndDate^CombatEligibilityEndFMDate^TestPatientFlag^TestPatientFlagCode^CurrentEnrollmentIEN^PreferredInstitutionIEN^PatientTypeIEN^PatientICN^FugitiveFelonFlag^FugitiveFelonFlagCode^FFFEnteredStaffIEN^FFFEnteredDateTime^FFFEnteredFMDate^FFFRemovedStaffIEN^FFFRemovedDateTime^FFFRemovedFMDate^FFFRemovedReason^VeteranFlag^VeteranFlagCode^ODSTreatmentDateTime^ODSTreatmentFMDate^ODSRecalledCode^ODSRecalledCodeCode^ODSRankType^OperationDesertShieldRank^SensitiveFlag^SensitiveFlagCode^PreferredInstitutionSource^PreferredInstitutionSourceCode^VeteranTransportationProgramFlag^VeteranTransportationProgramFlagCode^SelfIdentifiedGender^SelfIdentifiedGenderCode^DeathDocumentationType^OpCode^VistaCreateDate^VistaEditDate"
]]></Implementation>
</Method>

<Method name="RemoveObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>Sta3n:%Integer,FMPK:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Status=1
	Set VistaSite=##class(VX130.VistaSite).%OpenId(Sta3n)
	Set NS=VistaSite.VistaSiteNamespace
	Set PatientIEN=$Piece(FMPK,",",1)
	Quit:(+PatientIEN'>0) "1^PatientIEN Not Numeric"

	// mlb: 209-07-23: Replaced Old code to call UpdateObject when Patient record is not deleted.
	//Quit:$Get(^|NS|DPT(PatientIEN,0))'="" "1" // Record is not deleted.
	Quit:$Get(^|NS|DPT(PatientIEN,0))'="" ..UpdateObject(Sta3n,FMPK) // Record is not deleted.
	Set id=Sta3n_"||"_PatientIEN
	Set oref=..%OpenId(id,4,.Status)
	If '$$$ISOK(Status) {
		If $System.Status.GetErrorCodes(Status)'=5809 {
			// Error is not because the object does not exist.  Probably can't get lock.
			do ..CleanUp()
			Quit Status
		} Else {
			Quit 1 // Error is because record does not exist so don't have to delete.
		}
	} // Either got lock or object does not exist.
	If $IsObject(oref) {
		Set oref.OpCode="D"
		Set oref.VistaEditDate=$ZDateTime($ZTIMESTAMP,3)
		Set Status=oref.%Save()
		Job ##class(Patient.PurpleHeart2534v001).RemoveObject(Sta3n,PatientIEN)
		Job ##class(Patient.CatastrophicDisability2409v024).RemoveObject(Sta3n,PatientIEN)
		Job ##class(Patient.CatastrophicDisabilityHistory2399v001).RemoveObject(Sta3n,PatientIEN)
		Job ##class(PatSub.ConfidentialAddressCategory2141v001).RemoveObject(Sta3n,PatientIEN)
	}
	do ..CleanUp()
	Quit Status
]]></Implementation>
</Method>

<Method name="ToFlatFileRecord">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set oref=..%OpenId(id,4,.sc)
	Set OutputRecord=""
	If $IsObject(oref) {
		Set OutputRecord=oref.Sta3n_
		"^"_oref.PatientIEN_
		"^"_oref.PatientFirstName_
		"^"_oref.PatientLastName_
		"^"_oref.PatientName_
		"^"_oref.Gender_
		"^"_oref.GenderCode_
		"^"_oref.BirthDateTime_
		"^"_oref.BirthFMDate_
		"^"_oref.MaritalStatusIEN_
		"^"_oref.ReligionIEN_
		"^"_oref.DuplicateRecordStatus_
		"^"_oref.DuplicateRecordStatusCode_
		"^"_oref.DestinationMergePatientIEN_
		"^"_oref.PatientSSN_
		"^"_oref.ScrSSN_
		"^"_oref.PseudoSSNReason_
		"^"_oref.PseudoSSNReasonCode_
		"^"_oref.SSNVerificationStatus_
		"^"_oref.SSNVerificationStatusCode_
		"^"_oref.PatientEnteredRemark_
		"^"_oref.PatientEnteredByStaffIEN_
		"^"_oref.PatientEnteredDateTime_
		"^"_oref.PatientEnteredFMDate_
		"^"_oref.PatientEnteredCode_
		"^"_oref.PatientEnteredCodeCode_
		"^"_oref.StreetAddress1_
		"^"_oref.Zip4_
		"^"_oref.StreetAddress2_
		"^"_oref.City_
		"^"_oref.StateIEN_
		"^"_oref.Zip_
		"^"_oref.StateCountyIEN_
		"^"_oref.BadAddressIndicator_
		"^"_oref.BadAddressIndicatorCode_
		"^"_oref.CurrentMeansTestStatusIEN_
		"^"_oref.IneligibleDateTime_
		"^"_oref.IneligibleFMDate_
		"^"_oref.PatientMissingDateTime_
		"^"_oref.PatientMissingFMDate_
		"^"_oref.IneligibleSource_
		"^"_oref.IneligibleSourceCode_
		"^"_oref.IneligibleCity_
		"^"_oref.IneligibleStateIEN_
		"^"_oref.IneligibleVAROReason_
		"^"_oref.PatientMissingSource_
		"^"_oref.PatientMissingSourceCode_
		"^"_oref.PatientMissingCity_
		"^"_oref.PatientMissingStateIEN_
		"^"_oref.EmergencyResponseIndicator_
		"^"_oref.EmergencyResponseIndicatorCode_
		"^"_oref.ServiceConnectedFlag_
		"^"_oref.ServiceConnectedFlagCode_
		"^"_oref.PercentServiceConnect_
		"^"_oref.IneligibleReason_
		"^"_oref.FederalAgencyIEN_
		"^"_oref.GovernmentEmployeeFlag_
		"^"_oref.GovernmentEmployeeFlagCode_
		"^"_oref.InsuranceCoverageFlag_
		"^"_oref.InsuranceCoverageFlagCode_
		"^"_oref.VietnamServiceFlag_
		"^"_oref.VietnamServiceFlagCode_
		"^"_oref.AgentOrangeExposureFlag_
		"^"_oref.AgentOrangeExposureFlagCode_
		"^"_oref.IonizingRadiationExposureFlag_
		"^"_oref.IonizingRadiationExposureFlagCode_
		"^"_oref.SHADFlag_
		"^"_oref.SHADFlagCode_
		"^"_oref.RadiationExposureCode_
		"^"_oref.RadiationExposureCodeCode_
		"^"_oref.AgentOrangeLocationCode_
		"^"_oref.AgentOrangeLocationCodeCode_
		"^"_oref.FilipinoVeteranCode_
		"^"_oref.FilipinoVeteranCodeCode_
		"^"_oref.SouthwestAsiaCondition_
		"^"_oref.SouthwestAsiaConditionCode_
		"^"_oref.PeriodOfServiceIEN_
		"^"_oref.DeathDateTime_
		"^"_oref.DeathFMDate_
		"^"_oref.DeathEnteredByStaffIEN_
		"^"_oref.DeathNotificationSource_
		"^"_oref.DeathModifiedDateTime_
		"^"_oref.DeathModifiedFMDate_
		"^"_oref.DeathLastUpdatedByStaffIEN_
		"^"_oref.CollateralSponsorPatientIEN_
		"^"_oref.EligibilityIEN_
		"^"_oref.EligibilityVACode_
		"^"_oref.EligibilityStatus_
		"^"_oref.EligibilityStatusCode_
		"^"_oref.EligibilityStatusDateTime_
		"^"_oref.EligibilityStatusFMDate_
		"^"_oref.EligibilityVerificationSource_
		"^"_oref.EligibilityVerificationSourceCode_
		"^"_oref.EligibilityInterimDateTime_
		"^"_oref.EligibilityInterimFMDate_
		"^"_oref.EligibilityVerificationMethod_
		"^"_oref.EligibilityEnteredStaffIEN_
		"^"_oref.MedicaidEligibleFlag_
		"^"_oref.MedicaidEligibleFlagCode_
		"^"_oref.MedicaidInquireDateTime_
		"^"_oref.MedicaidInquireFMDate_
		"^"_oref.MedicaidNumber_
		"^"_oref.POWFlag_
		"^"_oref.POWFlagCode_
		"^"_oref.POWLocationIEN_
		"^"_oref.CombatFlag_
		"^"_oref.CombatFlagCode_
		"^"_oref.CombatFromDate_
		"^"_oref.CombatFromFMDate_
		"^"_oref.CombatToDate_
		"^"_oref.CombatToFMDate_
		"^"_oref.CombatEligibilityEndDate_
		"^"_oref.CombatEligibilityEndFMDate_
		"^"_oref.TestPatientFlag_
		"^"_oref.TestPatientFlagCode_
		"^"_oref.CurrentEnrollmentIEN_
		"^"_oref.PreferredInstitutionIEN_
		"^"_oref.PatientTypeIEN_
		"^"_oref.PatientICN_
		"^"_oref.FugitiveFelonFlag_
		"^"_oref.FugitiveFelonFlagCode_
		"^"_oref.FFFEnteredStaffIEN_
		"^"_oref.FFFEnteredDateTime_
		"^"_oref.FFFEnteredFMDate_
		"^"_oref.FFFRemovedStaffIEN_
		"^"_oref.FFFRemovedDateTime_
		"^"_oref.FFFRemovedFMDate_
		"^"_oref.FFFRemovedReason_
		"^"_oref.VeteranFlag_
		"^"_oref.VeteranFlagCode_
		"^"_oref.ODSTreatmentDateTime_
		"^"_oref.ODSTreatmentFMDate_
		"^"_oref.ODSRecalledCode_
		"^"_oref.ODSRecalledCodeCode_
		"^"_oref.ODSRankType_
		"^"_oref.OperationDesertShieldRank_
		"^"_oref.SensitiveFlag_
		"^"_oref.SensitiveFlagCode_
		"^"_oref.PreferredInstitutionSource_
		"^"_oref.PreferredInstitutionSourceCode_
		"^"_oref.VeteranTransportationProgramFlag_
		"^"_oref.VeteranTransportationProgramFlagCode_
		"^"_oref.SelfIdentifiedGender_
		"^"_oref.SelfIdentifiedGenderCode_
		"^"_oref.DeathDocumentationType_
		"^"_oref.OpCode_
		"^"_oref.VistaCreateDate_
		"^"_oref.VistaEditDate
	}
	Quit OutputRecord
]]></Implementation>
</Method>

<Method name="UpdateObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>Sta3n:%Integer,FMPK:%String,DataQuality:%Boolean=0,HistoricalPull:%Boolean=0,ReCheck:%Boolean=0</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Status=1
	Set VistaSite=##class(VX130.VistaSite).%OpenId(Sta3n)
	Set NS=VistaSite.VistaSiteNamespace
	Set LogEdits=0
	Kill BitFlag

	Set PatientIEN=$Piece(FMPK,",",1)
	Quit:(+PatientIEN'>0) "1^PatientIEN Not found in FMPK"

	If ($Get(^|NS|DPT(PatientIEN,0))="")
	{
		// Record with these iens not found In VISTA.  Check to see if we need to set OpCode.
		Do ..RemoveObject(Sta3n,FMPK)
		Quit "1^Zero Node Not Found in VISTA"
	}
	Set id=Sta3n_"||"_PatientIEN
	Set oref=..%OpenId(id,4,.Status)

	If '$$$ISOK(Status) {
		If $System.Status.GetErrorCodes(Status)'=5809 {
			// Error is not because the object does not exist.  Probably can't get lock.
			do ..CleanUp()
			Quit Status
		}
	} // Either got lock or object does not exist yet.

	If '$IsObject(oref) {
		Set oref=..%New()
		Set oref.Sta3n=Sta3n
		Set oref.PatientIEN=PatientIEN
		Set oref.VistaCreateDate=$Case(HistoricalPull,1:"1900-01-01",:$ZDateTime($ZTIMESTAMP,3))
		Set oref.OpCode=""
		Set $Bit(BitFlag,1)=1
	}
	Set $Bit(BitFlag,2)=oref.setPatientFirstName(NS,PatientIEN)
	Set $Bit(BitFlag,3)=oref.setPatientLastName(NS,PatientIEN)
	Set $Bit(BitFlag,4)=oref.setPatientName(NS,PatientIEN)
	Set $Bit(BitFlag,5)=oref.setGender(NS,PatientIEN)
	Set $Bit(BitFlag,6)=oref.setGenderCode(NS,PatientIEN)
	Set $Bit(BitFlag,7)=oref.setBirthDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,8)=oref.setBirthFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,9)=oref.setMaritalStatusIEN(NS,PatientIEN)
	Set $Bit(BitFlag,10)=oref.setReligionIEN(NS,PatientIEN)
	Set $Bit(BitFlag,11)=oref.setDuplicateRecordStatus(NS,PatientIEN)
	Set $Bit(BitFlag,12)=oref.setDuplicateRecordStatusCode(NS,PatientIEN)
	Set $Bit(BitFlag,13)=oref.setDestinationMergePatientIEN(NS,PatientIEN)
	Set $Bit(BitFlag,14)=oref.setPatientSSN(NS,PatientIEN)
	Set $Bit(BitFlag,15)=oref.setScrSSN(NS,PatientIEN)
	Set $Bit(BitFlag,16)=oref.setPseudoSSNReason(NS,PatientIEN)
	Set $Bit(BitFlag,17)=oref.setPseudoSSNReasonCode(NS,PatientIEN)
	Set $Bit(BitFlag,18)=oref.setSSNVerificationStatus(NS,PatientIEN)
	Set $Bit(BitFlag,19)=oref.setSSNVerificationStatusCode(NS,PatientIEN)
	Set $Bit(BitFlag,20)=oref.setPatientEnteredRemark(NS,PatientIEN)
	Set $Bit(BitFlag,21)=oref.setPatientEnteredByStaffIEN(NS,PatientIEN)
	Set $Bit(BitFlag,22)=oref.setPatientEnteredDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,23)=oref.setPatientEnteredFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,24)=oref.setPatientEnteredCode(NS,PatientIEN)
	Set $Bit(BitFlag,25)=oref.setPatientEnteredCodeCode(NS,PatientIEN)
	Set $Bit(BitFlag,26)=oref.setStreetAddress1(NS,PatientIEN)
	Set $Bit(BitFlag,27)=oref.setZip4(NS,PatientIEN)
	Set $Bit(BitFlag,28)=oref.setStreetAddress2(NS,PatientIEN)
	Set $Bit(BitFlag,29)=oref.setCity(NS,PatientIEN)
	Set $Bit(BitFlag,30)=oref.setStateIEN(NS,PatientIEN)
	Set $Bit(BitFlag,31)=oref.setZip(NS,PatientIEN)
	Set $Bit(BitFlag,32)=oref.setStateCountyIEN(NS,PatientIEN)
	Set $Bit(BitFlag,33)=oref.setBadAddressIndicator(NS,PatientIEN)
	Set $Bit(BitFlag,34)=oref.setBadAddressIndicatorCode(NS,PatientIEN)
	Set $Bit(BitFlag,35)=oref.setCurrentMeansTestStatusIEN(NS,PatientIEN)
	Set $Bit(BitFlag,36)=oref.setIneligibleDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,37)=oref.setIneligibleFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,38)=oref.setPatientMissingDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,39)=oref.setPatientMissingFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,40)=oref.setIneligibleSource(NS,PatientIEN)
	Set $Bit(BitFlag,41)=oref.setIneligibleSourceCode(NS,PatientIEN)
	Set $Bit(BitFlag,42)=oref.setIneligibleCity(NS,PatientIEN)
	Set $Bit(BitFlag,43)=oref.setIneligibleStateIEN(NS,PatientIEN)
	Set $Bit(BitFlag,44)=oref.setIneligibleVAROReason(NS,PatientIEN)
	Set $Bit(BitFlag,45)=oref.setPatientMissingSource(NS,PatientIEN)
	Set $Bit(BitFlag,46)=oref.setPatientMissingSourceCode(NS,PatientIEN)
	Set $Bit(BitFlag,47)=oref.setPatientMissingCity(NS,PatientIEN)
	Set $Bit(BitFlag,48)=oref.setPatientMissingStateIEN(NS,PatientIEN)
	Set $Bit(BitFlag,49)=oref.setEmergencyResponseIndicator(NS,PatientIEN)
	Set $Bit(BitFlag,50)=oref.setEmergencyResponseIndicatorCode(NS,PatientIEN)
	Set $Bit(BitFlag,51)=oref.setServiceConnectedFlag(NS,PatientIEN)
	Set $Bit(BitFlag,52)=oref.setServiceConnectedFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,53)=oref.setPercentServiceConnect(NS,PatientIEN)
	Set $Bit(BitFlag,54)=oref.setIneligibleReason(NS,PatientIEN)
	Set $Bit(BitFlag,55)=oref.setFederalAgencyIEN(NS,PatientIEN)
	Set $Bit(BitFlag,56)=oref.setGovernmentEmployeeFlag(NS,PatientIEN)
	Set $Bit(BitFlag,57)=oref.setGovernmentEmployeeFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,58)=oref.setInsuranceCoverageFlag(NS,PatientIEN)
	Set $Bit(BitFlag,59)=oref.setInsuranceCoverageFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,60)=oref.setVietnamServiceFlag(NS,PatientIEN)
	Set $Bit(BitFlag,61)=oref.setVietnamServiceFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,62)=oref.setAgentOrangeExposureFlag(NS,PatientIEN)
	Set $Bit(BitFlag,63)=oref.setAgentOrangeExposureFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,64)=oref.setIonizingRadiationExposureFlag(NS,PatientIEN)
	Set $Bit(BitFlag,65)=oref.setIonizingRadiationExposureFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,66)=oref.setSHADFlag(NS,PatientIEN)
	Set $Bit(BitFlag,67)=oref.setSHADFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,68)=oref.setRadiationExposureCode(NS,PatientIEN)
	Set $Bit(BitFlag,69)=oref.setRadiationExposureCodeCode(NS,PatientIEN)
	Set $Bit(BitFlag,70)=oref.setAgentOrangeLocationCode(NS,PatientIEN)
	Set $Bit(BitFlag,71)=oref.setAgentOrangeLocationCodeCode(NS,PatientIEN)
	Set $Bit(BitFlag,72)=oref.setFilipinoVeteranCode(NS,PatientIEN)
	Set $Bit(BitFlag,73)=oref.setFilipinoVeteranCodeCode(NS,PatientIEN)
	Set $Bit(BitFlag,74)=oref.setSouthwestAsiaCondition(NS,PatientIEN)
	Set $Bit(BitFlag,75)=oref.setSouthwestAsiaConditionCode(NS,PatientIEN)
	Set $Bit(BitFlag,76)=oref.setPeriodOfServiceIEN(NS,PatientIEN)
	Set $Bit(BitFlag,77)=oref.setDeathDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,78)=oref.setDeathFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,79)=oref.setDeathEnteredByStaffIEN(NS,PatientIEN)
	Set $Bit(BitFlag,80)=oref.setDeathNotificationSource(NS,PatientIEN)
	Set $Bit(BitFlag,81)=oref.setDeathModifiedDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,82)=oref.setDeathModifiedFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,83)=oref.setDeathLastUpdatedByStaffIEN(NS,PatientIEN)
	Set $Bit(BitFlag,84)=oref.setCollateralSponsorPatientIEN(NS,PatientIEN)
	Set $Bit(BitFlag,85)=oref.setEligibilityIEN(NS,PatientIEN)
	Set $Bit(BitFlag,86)=oref.setEligibilityVACode(NS,PatientIEN)
	Set $Bit(BitFlag,87)=oref.setEligibilityStatus(NS,PatientIEN)
	Set $Bit(BitFlag,88)=oref.setEligibilityStatusCode(NS,PatientIEN)
	Set $Bit(BitFlag,89)=oref.setEligibilityStatusDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,90)=oref.setEligibilityStatusFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,91)=oref.setEligibilityVerificationSource(NS,PatientIEN)
	Set $Bit(BitFlag,92)=oref.setEligibilityVerificationSourceCode(NS,PatientIEN)
	Set $Bit(BitFlag,93)=oref.setEligibilityInterimDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,94)=oref.setEligibilityInterimFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,95)=oref.setEligibilityVerificationMethod(NS,PatientIEN)
	Set $Bit(BitFlag,96)=oref.setEligibilityEnteredStaffIEN(NS,PatientIEN)
	Set $Bit(BitFlag,97)=oref.setMedicaidEligibleFlag(NS,PatientIEN)
	Set $Bit(BitFlag,98)=oref.setMedicaidEligibleFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,99)=oref.setMedicaidInquireDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,100)=oref.setMedicaidInquireFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,101)=oref.setMedicaidNumber(NS,PatientIEN)
	Set $Bit(BitFlag,102)=oref.setPOWFlag(NS,PatientIEN)
	Set $Bit(BitFlag,103)=oref.setPOWFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,104)=oref.setPOWLocationIEN(NS,PatientIEN)
	Set $Bit(BitFlag,105)=oref.setCombatFlag(NS,PatientIEN)
	Set $Bit(BitFlag,106)=oref.setCombatFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,107)=oref.setCombatFromDate(NS,PatientIEN)
	Set $Bit(BitFlag,108)=oref.setCombatFromFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,109)=oref.setCombatToDate(NS,PatientIEN)
	Set $Bit(BitFlag,110)=oref.setCombatToFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,111)=oref.setCombatEligibilityEndDate(NS,PatientIEN)
	Set $Bit(BitFlag,112)=oref.setCombatEligibilityEndFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,113)=oref.setTestPatientFlag(NS,PatientIEN)
	Set $Bit(BitFlag,114)=oref.setTestPatientFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,115)=oref.setCurrentEnrollmentIEN(NS,PatientIEN)
	Set $Bit(BitFlag,116)=oref.setPreferredInstitutionIEN(NS,PatientIEN)
	Set $Bit(BitFlag,117)=oref.setPatientTypeIEN(NS,PatientIEN)
	Set $Bit(BitFlag,118)=oref.setPatientICN(NS,PatientIEN)
	Set $Bit(BitFlag,119)=oref.setFugitiveFelonFlag(NS,PatientIEN)
	Set $Bit(BitFlag,120)=oref.setFugitiveFelonFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,121)=oref.setFFFEnteredStaffIEN(NS,PatientIEN)
	Set $Bit(BitFlag,122)=oref.setFFFEnteredDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,123)=oref.setFFFEnteredFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,124)=oref.setFFFRemovedStaffIEN(NS,PatientIEN)
	Set $Bit(BitFlag,125)=oref.setFFFRemovedDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,126)=oref.setFFFRemovedFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,127)=oref.setFFFRemovedReason(NS,PatientIEN)
	Set $Bit(BitFlag,128)=oref.setVeteranFlag(NS,PatientIEN)
	Set $Bit(BitFlag,129)=oref.setVeteranFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,130)=oref.setODSTreatmentDateTime(NS,PatientIEN)
	Set $Bit(BitFlag,131)=oref.setODSTreatmentFMDate(NS,PatientIEN)
	Set $Bit(BitFlag,132)=oref.setODSRecalledCode(NS,PatientIEN)
	Set $Bit(BitFlag,133)=oref.setODSRecalledCodeCode(NS,PatientIEN)
	Set $Bit(BitFlag,134)=oref.setODSRankType(NS,PatientIEN)
	Set $Bit(BitFlag,135)=oref.setOperationDesertShieldRank(NS,PatientIEN)
	Set $Bit(BitFlag,136)=oref.setSensitiveFlag(NS,PatientIEN)
	Set $Bit(BitFlag,137)=oref.setSensitiveFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,138)=oref.setPreferredInstitutionSource(NS,PatientIEN)
	Set $Bit(BitFlag,139)=oref.setPreferredInstitutionSourceCode(NS,PatientIEN)
	Set $Bit(BitFlag,140)=oref.setVeteranTransportationProgramFlag(NS,PatientIEN)
	Set $Bit(BitFlag,141)=oref.setVeteranTransportationProgramFlagCode(NS,PatientIEN)
	Set $Bit(BitFlag,142)=oref.setSelfIdentifiedGender(NS,PatientIEN)
	Set $Bit(BitFlag,143)=oref.setSelfIdentifiedGenderCode(NS,PatientIEN)
	Set $Bit(BitFlag,144)=oref.setDeathDocumentationType(NS,PatientIEN)
	If oref.OpCode]"" {
		Set oref.OpCode=""
		Set $Bit(BitFlag,145)=1
	}
	If $BitFind(BitFlag,1)>0 {
		// Something changed.
		If LogEdits {
			Write ..%ClassName(1),id," "
			For zz=1:1:144 {
				Write $Bit(BitFlag,zz)
			}
			Write !
			//Read zzz
		}
		If $Get(DataQuality) {
			//Give the process time to find the update in the journal files.
			//Add difference to QC.Detail but don't save object.
			Set qcid =##class(QC.QualityCheckHistory).GetID("VISTA",Sta3n,..%ClassName(1))
			Do ##class(QC.Detail).AddEntry(qcid,Sta3n_"||"_PatientIEN,BitFlag)
			Quit:'ReCheck 1
		}
		Set oref.VistaEditDate=$ZDateTime($ZTIMESTAMP,3)
		Set Status=oref.%Save()
	}
	Do ..CleanUp()
	Quit Status
]]></Implementation>
</Method>

<Method name="setAgentOrangeExposureFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set AgentOrangeExposureFlag=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",2)
	Set AgentOrangeExposureFlag=$Case(AgentOrangeExposureFlag,"Y":"Y","N":"N","U":"U",:$Extract(AgentOrangeExposureFlag,1))
	Set AgentOrangeExposureFlag=$Extract(AgentOrangeExposureFlag,1,1)
	If ..AgentOrangeExposureFlag'=AgentOrangeExposureFlag {
		Set ..AgentOrangeExposureFlag=AgentOrangeExposureFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setAgentOrangeExposureFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set AgentOrangeExposureFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",2)
	Set AgentOrangeExposureFlagCode=$Extract(AgentOrangeExposureFlagCode,1,50)
	If ..AgentOrangeExposureFlagCode'=AgentOrangeExposureFlagCode {
		Set ..AgentOrangeExposureFlagCode=AgentOrangeExposureFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setAgentOrangeLocationCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set AgentOrangeLocationCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",13)
	If AgentOrangeLocationCode]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.3213,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=AgentOrangeLocationCode) {
				Set AgentOrangeLocationCode=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set AgentOrangeLocationCode=$Extract(AgentOrangeLocationCode,1,50)
	If ..AgentOrangeLocationCode'=AgentOrangeLocationCode {
		Set ..AgentOrangeLocationCode=AgentOrangeLocationCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setAgentOrangeLocationCodeCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set AgentOrangeLocationCodeCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",13)
	Set AgentOrangeLocationCodeCode=$Extract(AgentOrangeLocationCodeCode,1,50)
	If ..AgentOrangeLocationCodeCode'=AgentOrangeLocationCodeCode {
		Set ..AgentOrangeLocationCodeCode=AgentOrangeLocationCodeCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setBadAddressIndicator">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set BadAddressIndicator=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",16)
	If BadAddressIndicator]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.121,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=BadAddressIndicator) {
				Set BadAddressIndicator=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set BadAddressIndicator=$Extract(BadAddressIndicator,1,50)
	If ..BadAddressIndicator'=BadAddressIndicator {
		Set ..BadAddressIndicator=BadAddressIndicator
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setBadAddressIndicatorCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set BadAddressIndicatorCode=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",16)
	Set BadAddressIndicatorCode=$Extract(BadAddressIndicatorCode,1,50)
	If ..BadAddressIndicatorCode'=BadAddressIndicatorCode {
		Set ..BadAddressIndicatorCode=BadAddressIndicatorCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setBirthDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set BirthDateTime=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",3)
	If ('##class(%FilemanTimeStamp).IsValid(BirthDateTime)) {
		Set BirthDateTime=""
	}
	If ..BirthDateTime'=BirthDateTime {
		Set ..BirthDateTime=BirthDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setBirthFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set BirthFMDate=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",3)
	Set BirthFMDate=$Extract(BirthFMDate,1,50)
	If ..BirthFMDate'=BirthFMDate {
		Set ..BirthFMDate=BirthFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCity">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set City=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",4)
	Set City=$Extract(City,1,50)
	If ..City'=City {
		Set ..City=City
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCollateralSponsorPatientIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CollateralSponsorPatientIEN=$Piece($Get(^|NS|DPT(PatientIEN,.36)),"^",11)
	Set CollateralSponsorPatientIEN=$Extract(CollateralSponsorPatientIEN,1,50)
	If ..CollateralSponsorPatientIEN'=CollateralSponsorPatientIEN {
		Set ..CollateralSponsorPatientIEN=CollateralSponsorPatientIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCombatEligibilityEndDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CombatEligibilityEndDate=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",15)
	If ('##class(%FilemanDate).IsValid(CombatEligibilityEndDate)) {
		Set CombatEligibilityEndDate=""
	}
	If ..CombatEligibilityEndDate'=CombatEligibilityEndDate {
		Set ..CombatEligibilityEndDate=CombatEligibilityEndDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCombatEligibilityEndFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CombatEligibilityEndFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",15)
	Set CombatEligibilityEndFMDate=$Extract(CombatEligibilityEndFMDate,1,50)
	If ..CombatEligibilityEndFMDate'=CombatEligibilityEndFMDate {
		Set ..CombatEligibilityEndFMDate=CombatEligibilityEndFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCombatFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CombatFlag=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",11)
	Set CombatFlag=$Case(CombatFlag,"Y":"Y","N":"N",:$Extract(CombatFlag,1))
	Set CombatFlag=$Extract(CombatFlag,1,1)
	If ..CombatFlag'=CombatFlag {
		Set ..CombatFlag=CombatFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCombatFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CombatFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",11)
	Set CombatFlagCode=$Extract(CombatFlagCode,1,50)
	If ..CombatFlagCode'=CombatFlagCode {
		Set ..CombatFlagCode=CombatFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCombatFromDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CombatFromDate=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",13)
	If ('##class(%FilemanDate).IsValid(CombatFromDate)) {
		Set CombatFromDate=""
	}
	If ..CombatFromDate'=CombatFromDate {
		Set ..CombatFromDate=CombatFromDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCombatFromFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CombatFromFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",13)
	Set CombatFromFMDate=$Extract(CombatFromFMDate,1,50)
	If ..CombatFromFMDate'=CombatFromFMDate {
		Set ..CombatFromFMDate=CombatFromFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCombatToDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CombatToDate=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",14)
	If ('##class(%FilemanDate).IsValid(CombatToDate)) {
		Set CombatToDate=""
	}
	If ..CombatToDate'=CombatToDate {
		Set ..CombatToDate=CombatToDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCombatToFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CombatToFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",14)
	Set CombatToFMDate=$Extract(CombatToFMDate,1,50)
	If ..CombatToFMDate'=CombatToFMDate {
		Set ..CombatToFMDate=CombatToFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCurrentEnrollmentIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CurrentEnrollmentIEN=$Piece($Get(^|NS|DPT(PatientIEN,"ENR")),"^",1)
	Set CurrentEnrollmentIEN=$Extract(CurrentEnrollmentIEN,1,50)
	If ..CurrentEnrollmentIEN'=CurrentEnrollmentIEN {
		Set ..CurrentEnrollmentIEN=CurrentEnrollmentIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setCurrentMeansTestStatusIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set CurrentMeansTestStatusIEN=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",14)
	Set CurrentMeansTestStatusIEN=$Extract(CurrentMeansTestStatusIEN,1,50)
	If ..CurrentMeansTestStatusIEN'=CurrentMeansTestStatusIEN {
		Set ..CurrentMeansTestStatusIEN=CurrentMeansTestStatusIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDeathDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set DeathDateTime=$Piece($Get(^|NS|DPT(PatientIEN,.35)),"^",1)
	If ('##class(%FilemanTimeStamp).IsValid(DeathDateTime)) {
		Set DeathDateTime=""
	}
	If ..DeathDateTime'=DeathDateTime {
		Set ..DeathDateTime=DeathDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDeathDocumentationType">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//OK 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//From the Documentation file 47.75
	Set Flag=0
	Set DeathDocumentationType=$Piece($Get(^|NS|DPT(PatientIEN,.35)),"^",7)
	//Data is located in another FileMan File.
	//OK 07/13/18: Needs a childTableUpdate method and an update trigger created.
	//mlb - This is unlikely to change, and doesn't really have an effect..
	If (+DeathDocumentationType) {
		Set DeathDocumentationType=$Piece($Get(^|NS|DG(47.75,DeathDocumentationType,0)),"^",1)
	}
	Set DeathDocumentationType=$Extract(DeathDocumentationType,1,100)
	If ..DeathDocumentationType'=DeathDocumentationType {
		Set ..DeathDocumentationType=DeathDocumentationType
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDeathEnteredByStaffIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set DeathEnteredByStaffIEN=$Piece($Get(^|NS|DPT(PatientIEN,.35)),"^",2)
	Set DeathEnteredByStaffIEN=$Extract(DeathEnteredByStaffIEN,1,50)
	If ..DeathEnteredByStaffIEN'=DeathEnteredByStaffIEN {
		Set ..DeathEnteredByStaffIEN=DeathEnteredByStaffIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDeathFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set DeathFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.35)),"^",1)
	Set DeathFMDate=$Extract(DeathFMDate,1,50)
	If ..DeathFMDate'=DeathFMDate {
		Set ..DeathFMDate=DeathFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDeathLastUpdatedByStaffIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set DeathLastUpdatedByStaffIEN=$Piece($Get(^|NS|DPT(PatientIEN,.35)),"^",5)
	Set DeathLastUpdatedByStaffIEN=$Extract(DeathLastUpdatedByStaffIEN,1,50)
	If ..DeathLastUpdatedByStaffIEN'=DeathLastUpdatedByStaffIEN {
		Set ..DeathLastUpdatedByStaffIEN=DeathLastUpdatedByStaffIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDeathModifiedDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set DeathModifiedDateTime=$Piece($Get(^|NS|DPT(PatientIEN,.35)),"^",4)
	If ('##class(%FilemanTimeStamp).IsValid(DeathModifiedDateTime)) {
		Set DeathModifiedDateTime=""
	}
	If ..DeathModifiedDateTime'=DeathModifiedDateTime {
		Set ..DeathModifiedDateTime=DeathModifiedDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDeathModifiedFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set DeathModifiedFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.35)),"^",4)
	Set DeathModifiedFMDate=$Extract(DeathModifiedFMDate,1,50)
	If ..DeathModifiedFMDate'=DeathModifiedFMDate {
		Set ..DeathModifiedFMDate=DeathModifiedFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDeathNotificationSource">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//OK 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//resolved value
	Set Flag=0
	Set DeathNotificationSource=$Piece($Get(^|NS|DPT(PatientIEN,.35)),"^",3)
	//Data is located in another FileMan File.
	//OK 07/13/18: Needs a childTableUpdate method and an update trigger created.
	//mlb - This is unlikely to change, and doesn't really have an effect.
	If (+DeathNotificationSource) {
		Set DeathNotificationSource=$Piece($Get(^|NS|DG(47.76,DeathNotificationSource,0)),"^",1)
	}
	Set DeathNotificationSource=$Extract(DeathNotificationSource,1,50)
	If ..DeathNotificationSource'=DeathNotificationSource {
		Set ..DeathNotificationSource=DeathNotificationSource
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDestinationMergePatientIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//DONE 01/30/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//This needs to be mapped to the hidden -9 to get the ToPatientIEN merge.  
	//This node represents the new destination record for a Patient when it is merged.
	Set Flag=0
	Set DestinationMergePatientIEN=$Piece($Get(^|NS|DPT(PatientIEN,-9)),"^",1)
	Set DestinationMergePatientIEN=$Extract(DestinationMergePatientIEN,1,50)
	If ..DestinationMergePatientIEN'=DestinationMergePatientIEN {
		Set ..DestinationMergePatientIEN=DestinationMergePatientIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDuplicateRecordStatus">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set DuplicateRecordStatus=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",18)
	If DuplicateRecordStatus]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.081,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=DuplicateRecordStatus) {
				Set DuplicateRecordStatus=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set DuplicateRecordStatus=$Extract(DuplicateRecordStatus,1,50)
	If ..DuplicateRecordStatus'=DuplicateRecordStatus {
		Set ..DuplicateRecordStatus=DuplicateRecordStatus
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setDuplicateRecordStatusCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set DuplicateRecordStatusCode=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",18)
	Set DuplicateRecordStatusCode=$Extract(DuplicateRecordStatusCode,1,50)
	If ..DuplicateRecordStatusCode'=DuplicateRecordStatusCode {
		Set ..DuplicateRecordStatusCode=DuplicateRecordStatusCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityEnteredStaffIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityEnteredStaffIEN=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",6)
	Set EligibilityEnteredStaffIEN=$Extract(EligibilityEnteredStaffIEN,1,50)
	If ..EligibilityEnteredStaffIEN'=EligibilityEnteredStaffIEN {
		Set ..EligibilityEnteredStaffIEN=EligibilityEnteredStaffIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityIEN=$Piece($Get(^|NS|DPT(PatientIEN,.36)),"^",1)
	Set EligibilityIEN=$Extract(EligibilityIEN,1,50)
	If ..EligibilityIEN'=EligibilityIEN {
		Set ..EligibilityIEN=EligibilityIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityInterimDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityInterimDateTime=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",4)
	If ('##class(%FilemanTimeStamp).IsValid(EligibilityInterimDateTime)) {
		Set EligibilityInterimDateTime=""
	}
	If ..EligibilityInterimDateTime'=EligibilityInterimDateTime {
		Set ..EligibilityInterimDateTime=EligibilityInterimDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityInterimFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityInterimFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",4)
	Set EligibilityInterimFMDate=$Extract(EligibilityInterimFMDate,1,50)
	If ..EligibilityInterimFMDate'=EligibilityInterimFMDate {
		Set ..EligibilityInterimFMDate=EligibilityInterimFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityStatus">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityStatus=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",1)
	If EligibilityStatus]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.3611,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=EligibilityStatus) {
				Set EligibilityStatus=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set EligibilityStatus=$Extract(EligibilityStatus,1,50)
	If ..EligibilityStatus'=EligibilityStatus {
		Set ..EligibilityStatus=EligibilityStatus
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityStatusCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityStatusCode=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",1)
	Set EligibilityStatusCode=$Extract(EligibilityStatusCode,1,50)
	If ..EligibilityStatusCode'=EligibilityStatusCode {
		Set ..EligibilityStatusCode=EligibilityStatusCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityStatusDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityStatusDateTime=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",2)
	If ('##class(%FilemanTimeStamp).IsValid(EligibilityStatusDateTime)) {
		Set EligibilityStatusDateTime=""
	}
	If ..EligibilityStatusDateTime'=EligibilityStatusDateTime {
		Set ..EligibilityStatusDateTime=EligibilityStatusDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityStatusFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityStatusFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",2)
	Set EligibilityStatusFMDate=$Extract(EligibilityStatusFMDate,1,50)
	If ..EligibilityStatusFMDate'=EligibilityStatusFMDate {
		Set ..EligibilityStatusFMDate=EligibilityStatusFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityVACode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//OK 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//maps to Eligibility Code (#8) field 3
	Set Flag=0
	Set EligibilityVACode=$Piece($Get(^|NS|DPT(PatientIEN,.36)),"^",1)
	//Data is located in another FileMan File.
	//OK 07/13/18: Needs a childTableUpdate method and an update trigger created.
	//mlb - This is unlikely to change, and doesn't really have an effect.
	If (+EligibilityVACode) {
		Set EligibilityVACode=$Piece($Get(^|NS|DIC(8,EligibilityVACode,0)),"^",4)
	}
	Set EligibilityVACode=$Extract(EligibilityVACode,1,50)
	If ..EligibilityVACode'=EligibilityVACode {
		Set ..EligibilityVACode=EligibilityVACode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityVerificationMethod">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityVerificationMethod=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",5)
	Set EligibilityVerificationMethod=$Extract(EligibilityVerificationMethod,1,50)
	If ..EligibilityVerificationMethod'=EligibilityVerificationMethod {
		Set ..EligibilityVerificationMethod=EligibilityVerificationMethod
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityVerificationSource">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityVerificationSource=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",3)
	If EligibilityVerificationSource]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.3613,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=EligibilityVerificationSource) {
				Set EligibilityVerificationSource=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set EligibilityVerificationSource=$Extract(EligibilityVerificationSource,1,50)
	If ..EligibilityVerificationSource'=EligibilityVerificationSource {
		Set ..EligibilityVerificationSource=EligibilityVerificationSource
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEligibilityVerificationSourceCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EligibilityVerificationSourceCode=$Piece($Get(^|NS|DPT(PatientIEN,.361)),"^",3)
	Set EligibilityVerificationSourceCode=$Extract(EligibilityVerificationSourceCode,1,50)
	If ..EligibilityVerificationSourceCode'=EligibilityVerificationSourceCode {
		Set ..EligibilityVerificationSourceCode=EligibilityVerificationSourceCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEmergencyResponseIndicator">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EmergencyResponseIndicator=$Piece($Get(^|NS|DPT(PatientIEN,.18)),"^",1)
	If EmergencyResponseIndicator]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.181,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=EmergencyResponseIndicator) {
				Set EmergencyResponseIndicator=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set EmergencyResponseIndicator=$Extract(EmergencyResponseIndicator,1,50)
	If ..EmergencyResponseIndicator'=EmergencyResponseIndicator {
		Set ..EmergencyResponseIndicator=EmergencyResponseIndicator
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setEmergencyResponseIndicatorCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set EmergencyResponseIndicatorCode=$Piece($Get(^|NS|DPT(PatientIEN,.18)),"^",1)
	Set EmergencyResponseIndicatorCode=$Extract(EmergencyResponseIndicatorCode,1,50)
	If ..EmergencyResponseIndicatorCode'=EmergencyResponseIndicatorCode {
		Set ..EmergencyResponseIndicatorCode=EmergencyResponseIndicatorCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFFFEnteredDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FFFEnteredDateTime=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",3)
	If ('##class(%FilemanTimeStamp).IsValid(FFFEnteredDateTime)) {
		Set FFFEnteredDateTime=""
	}
	If ..FFFEnteredDateTime'=FFFEnteredDateTime {
		Set ..FFFEnteredDateTime=FFFEnteredDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFFFEnteredFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FFFEnteredFMDate=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",3)
	Set FFFEnteredFMDate=$Extract(FFFEnteredFMDate,1,50)
	If ..FFFEnteredFMDate'=FFFEnteredFMDate {
		Set ..FFFEnteredFMDate=FFFEnteredFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFFFEnteredStaffIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FFFEnteredStaffIEN=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",2)
	Set FFFEnteredStaffIEN=$Extract(FFFEnteredStaffIEN,1,50)
	If ..FFFEnteredStaffIEN'=FFFEnteredStaffIEN {
		Set ..FFFEnteredStaffIEN=FFFEnteredStaffIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFFFRemovedDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FFFRemovedDateTime=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",5)
	If ('##class(%FilemanTimeStamp).IsValid(FFFRemovedDateTime)) {
		Set FFFRemovedDateTime=""
	}
	If ..FFFRemovedDateTime'=FFFRemovedDateTime {
		Set ..FFFRemovedDateTime=FFFRemovedDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFFFRemovedFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FFFRemovedFMDate=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",5)
	Set FFFRemovedFMDate=$Extract(FFFRemovedFMDate,1,50)
	If ..FFFRemovedFMDate'=FFFRemovedFMDate {
		Set ..FFFRemovedFMDate=FFFRemovedFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFFFRemovedReason">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FFFRemovedReason=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",9)
	Set FFFRemovedReason=$Extract(FFFRemovedReason,1,100)
	If ..FFFRemovedReason'=FFFRemovedReason {
		Set ..FFFRemovedReason=FFFRemovedReason
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFFFRemovedStaffIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FFFRemovedStaffIEN=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",4)
	Set FFFRemovedStaffIEN=$Extract(FFFRemovedStaffIEN,1,50)
	If ..FFFRemovedStaffIEN'=FFFRemovedStaffIEN {
		Set ..FFFRemovedStaffIEN=FFFRemovedStaffIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFederalAgencyIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FederalAgencyIEN=$Piece($Get(^|NS|DPT(PatientIEN,.3)),"^",9)
	Set FederalAgencyIEN=$Extract(FederalAgencyIEN,1,50)
	If ..FederalAgencyIEN'=FederalAgencyIEN {
		Set ..FederalAgencyIEN=FederalAgencyIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFilipinoVeteranCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FilipinoVeteranCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",14)
	If FilipinoVeteranCode]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.3214,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=FilipinoVeteranCode) {
				Set FilipinoVeteranCode=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set FilipinoVeteranCode=$Extract(FilipinoVeteranCode,1,50)
	If ..FilipinoVeteranCode'=FilipinoVeteranCode {
		Set ..FilipinoVeteranCode=FilipinoVeteranCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFilipinoVeteranCodeCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FilipinoVeteranCodeCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",14)
	Set FilipinoVeteranCodeCode=$Extract(FilipinoVeteranCodeCode,1,50)
	If ..FilipinoVeteranCodeCode'=FilipinoVeteranCodeCode {
		Set ..FilipinoVeteranCodeCode=FilipinoVeteranCodeCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFugitiveFelonFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FugitiveFelonFlag=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",1)
	Set FugitiveFelonFlag=$Case(FugitiveFelonFlag,"1":"Y",:$Extract(FugitiveFelonFlag,1))
	Set FugitiveFelonFlag=$Extract(FugitiveFelonFlag,1,1)
	If ..FugitiveFelonFlag'=FugitiveFelonFlag {
		Set ..FugitiveFelonFlag=FugitiveFelonFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setFugitiveFelonFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set FugitiveFelonFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,"FFP")),"^",1)
	Set FugitiveFelonFlagCode=$Extract(FugitiveFelonFlagCode,1,50)
	If ..FugitiveFelonFlagCode'=FugitiveFelonFlagCode {
		Set ..FugitiveFelonFlagCode=FugitiveFelonFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setGender">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//DONE 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//
	Set Flag=0
	Set Gender=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",2)
	Set Gender=$Extract(Gender,1,1)
	If ..Gender'=Gender {
		Set ..Gender=Gender
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setGenderCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set GenderCode=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",2)
	Set GenderCode=$Extract(GenderCode,1,50)
	If ..GenderCode'=GenderCode {
		Set ..GenderCode=GenderCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setGovernmentEmployeeFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set GovernmentEmployeeFlag=$Piece($Get(^|NS|DPT(PatientIEN,.311)),"^",2)
	Set GovernmentEmployeeFlag=$Case(GovernmentEmployeeFlag,"Y":"Y","N":"N",:$Extract(GovernmentEmployeeFlag,1))
	Set GovernmentEmployeeFlag=$Extract(GovernmentEmployeeFlag,1,1)
	If ..GovernmentEmployeeFlag'=GovernmentEmployeeFlag {
		Set ..GovernmentEmployeeFlag=GovernmentEmployeeFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setGovernmentEmployeeFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set GovernmentEmployeeFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.311)),"^",2)
	Set GovernmentEmployeeFlagCode=$Extract(GovernmentEmployeeFlagCode,1,50)
	If ..GovernmentEmployeeFlagCode'=GovernmentEmployeeFlagCode {
		Set ..GovernmentEmployeeFlagCode=GovernmentEmployeeFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIneligibleCity">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IneligibleCity=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",3)
	Set IneligibleCity=$Extract(IneligibleCity,1,50)
	If ..IneligibleCity'=IneligibleCity {
		Set ..IneligibleCity=IneligibleCity
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIneligibleDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IneligibleDateTime=$Piece($Get(^|NS|DPT(PatientIEN,.15)),"^",2)
	If ('##class(%FilemanTimeStamp).IsValid(IneligibleDateTime)) {
		Set IneligibleDateTime=""
	}
	If ..IneligibleDateTime'=IneligibleDateTime {
		Set ..IneligibleDateTime=IneligibleDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIneligibleFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IneligibleFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.15)),"^",2)
	Set IneligibleFMDate=$Extract(IneligibleFMDate,1,50)
	If ..IneligibleFMDate'=IneligibleFMDate {
		Set ..IneligibleFMDate=IneligibleFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIneligibleReason">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IneligibleReason=$Piece($Get(^|NS|DPT(PatientIEN,.3)),"^",7)
	Set IneligibleReason=$Extract(IneligibleReason,1,50)
	If ..IneligibleReason'=IneligibleReason {
		Set ..IneligibleReason=IneligibleReason
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIneligibleSource">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IneligibleSource=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",1)
	If IneligibleSource]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.1651,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=IneligibleSource) {
				Set IneligibleSource=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set IneligibleSource=$Extract(IneligibleSource,1,50)
	If ..IneligibleSource'=IneligibleSource {
		Set ..IneligibleSource=IneligibleSource
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIneligibleSourceCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IneligibleSourceCode=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",1)
	Set IneligibleSourceCode=$Extract(IneligibleSourceCode,1,50)
	If ..IneligibleSourceCode'=IneligibleSourceCode {
		Set ..IneligibleSourceCode=IneligibleSourceCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIneligibleStateIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IneligibleStateIEN=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",4)
	Set IneligibleStateIEN=$Extract(IneligibleStateIEN,1,50)
	If ..IneligibleStateIEN'=IneligibleStateIEN {
		Set ..IneligibleStateIEN=IneligibleStateIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIneligibleVAROReason">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IneligibleVAROReason=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",6)
	Set IneligibleVAROReason=$Extract(IneligibleVAROReason,1,100)
	If ..IneligibleVAROReason'=IneligibleVAROReason {
		Set ..IneligibleVAROReason=IneligibleVAROReason
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setInsuranceCoverageFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set InsuranceCoverageFlag=$Piece($Get(^|NS|DPT(PatientIEN,.31)),"^",11)
	Set InsuranceCoverageFlag=$Case(InsuranceCoverageFlag,"Y":"Y","N":"N","U":"U",:$Extract(InsuranceCoverageFlag,1))
	Set InsuranceCoverageFlag=$Extract(InsuranceCoverageFlag,1,1)
	If ..InsuranceCoverageFlag'=InsuranceCoverageFlag {
		Set ..InsuranceCoverageFlag=InsuranceCoverageFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setInsuranceCoverageFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set InsuranceCoverageFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.31)),"^",11)
	Set InsuranceCoverageFlagCode=$Extract(InsuranceCoverageFlagCode,1,50)
	If ..InsuranceCoverageFlagCode'=InsuranceCoverageFlagCode {
		Set ..InsuranceCoverageFlagCode=InsuranceCoverageFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIonizingRadiationExposureFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IonizingRadiationExposureFlag=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",3)
	Set IonizingRadiationExposureFlag=$Case(IonizingRadiationExposureFlag,"Y":"Y","N":"N","U":"U",:$Extract(IonizingRadiationExposureFlag,1))
	Set IonizingRadiationExposureFlag=$Extract(IonizingRadiationExposureFlag,1,1)
	If ..IonizingRadiationExposureFlag'=IonizingRadiationExposureFlag {
		Set ..IonizingRadiationExposureFlag=IonizingRadiationExposureFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setIonizingRadiationExposureFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set IonizingRadiationExposureFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",3)
	Set IonizingRadiationExposureFlagCode=$Extract(IonizingRadiationExposureFlagCode,1,50)
	If ..IonizingRadiationExposureFlagCode'=IonizingRadiationExposureFlagCode {
		Set ..IonizingRadiationExposureFlagCode=IonizingRadiationExposureFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setMaritalStatusIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set MaritalStatusIEN=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",5)
	Set MaritalStatusIEN=$Extract(MaritalStatusIEN,1,50)
	If ..MaritalStatusIEN'=MaritalStatusIEN {
		Set ..MaritalStatusIEN=MaritalStatusIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setMedicaidEligibleFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set MedicaidEligibleFlag=$Piece($Get(^|NS|DPT(PatientIEN,.38)),"^",1)
	Set MedicaidEligibleFlag=$Case(MedicaidEligibleFlag,"1":"Y","0":"N",:$Extract(MedicaidEligibleFlag,1))
	Set MedicaidEligibleFlag=$Extract(MedicaidEligibleFlag,1,1)
	If ..MedicaidEligibleFlag'=MedicaidEligibleFlag {
		Set ..MedicaidEligibleFlag=MedicaidEligibleFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setMedicaidEligibleFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set MedicaidEligibleFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.38)),"^",1)
	Set MedicaidEligibleFlagCode=$Extract(MedicaidEligibleFlagCode,1,50)
	If ..MedicaidEligibleFlagCode'=MedicaidEligibleFlagCode {
		Set ..MedicaidEligibleFlagCode=MedicaidEligibleFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setMedicaidInquireDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set MedicaidInquireDateTime=$Piece($Get(^|NS|DPT(PatientIEN,.38)),"^",2)
	If ('##class(%FilemanTimeStamp).IsValid(MedicaidInquireDateTime)) {
		Set MedicaidInquireDateTime=""
	}
	If ..MedicaidInquireDateTime'=MedicaidInquireDateTime {
		Set ..MedicaidInquireDateTime=MedicaidInquireDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setMedicaidInquireFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set MedicaidInquireFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.38)),"^",2)
	Set MedicaidInquireFMDate=$Extract(MedicaidInquireFMDate,1,50)
	If ..MedicaidInquireFMDate'=MedicaidInquireFMDate {
		Set ..MedicaidInquireFMDate=MedicaidInquireFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setMedicaidNumber">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set MedicaidNumber=$Piece($Get(^|NS|DPT(PatientIEN,.38)),"^",3)
	Set MedicaidNumber=$Extract(MedicaidNumber,1,50)
	If ..MedicaidNumber'=MedicaidNumber {
		Set ..MedicaidNumber=MedicaidNumber
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setODSRankType">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//OK 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//Resolved value from dimension table.
	Set Flag=0
	Set ODSRankType=$Piece($Get(^|NS|DPT(PatientIEN,"ODS")),"^",3)
	//Data is located in another FileMan File.
	//OK 07/13/18: Needs a childTableUpdate method and an update trigger created.
	//mlb - This is unlikely to change, and doesn't really have an effect.
	If (+ODSRankType) {
		Set ODSRankType=$Piece($Get(^|NS|DIC(25002.1,ODSRankType,0)),"^",2)
	}
	Set ODSRankType=$Extract(ODSRankType,1,50)
	If ..ODSRankType'=ODSRankType {
		Set ..ODSRankType=ODSRankType
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setODSRecalledCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set ODSRecalledCode=$Piece($Get(^|NS|DPT(PatientIEN,"ODS")),"^",2)
	If ODSRecalledCode]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,11500.02,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=ODSRecalledCode) {
				Set ODSRecalledCode=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set ODSRecalledCode=$Extract(ODSRecalledCode,1,50)
	If ..ODSRecalledCode'=ODSRecalledCode {
		Set ..ODSRecalledCode=ODSRecalledCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setODSRecalledCodeCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set ODSRecalledCodeCode=$Piece($Get(^|NS|DPT(PatientIEN,"ODS")),"^",2)
	Set ODSRecalledCodeCode=$Extract(ODSRecalledCodeCode,1,50)
	If ..ODSRecalledCodeCode'=ODSRecalledCodeCode {
		Set ..ODSRecalledCodeCode=ODSRecalledCodeCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setODSTreatmentDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set ODSTreatmentDateTime=$Piece($Get(^|NS|DPT(PatientIEN,"ODS")),"^",1)
	If ('##class(%FilemanTimeStamp).IsValid(ODSTreatmentDateTime)) {
		Set ODSTreatmentDateTime=""
	}
	If ..ODSTreatmentDateTime'=ODSTreatmentDateTime {
		Set ..ODSTreatmentDateTime=ODSTreatmentDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setODSTreatmentFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set ODSTreatmentFMDate=$Piece($Get(^|NS|DPT(PatientIEN,"ODS")),"^",1)
	Set ODSTreatmentFMDate=$Extract(ODSTreatmentFMDate,1,50)
	If ..ODSTreatmentFMDate'=ODSTreatmentFMDate {
		Set ..ODSTreatmentFMDate=ODSTreatmentFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setOperationDesertShieldRank">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//OK 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//Resolved value from dimension table.
	Set Flag=0
	Set OperationDesertShieldRank=$Piece($Get(^|NS|DPT(PatientIEN,"ODS")),"^",3)
	//OK 07/13/18: Needs a childTableUpdate method and an update trigger created.
	//mlb - This is unlikely to change, and doesn't really have an effect.
	If (+OperationDesertShieldRank) {
		Set OperationDesertShieldRank=$Piece($Get(^|NS|DIC(25002.1,OperationDesertShieldRank,0)),"^",1)
	}
	Set OperationDesertShieldRank=$Extract(OperationDesertShieldRank,1,50)
	If ..OperationDesertShieldRank'=OperationDesertShieldRank {
		Set ..OperationDesertShieldRank=OperationDesertShieldRank
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPOWFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set POWFlag=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",5)
	Set POWFlag=$Case(POWFlag,"Y":"Y","N":"N","U":"U",:$Extract(POWFlag,1))
	Set POWFlag=$Extract(POWFlag,1,1)
	If ..POWFlag'=POWFlag {
		Set ..POWFlag=POWFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPOWFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set POWFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",5)
	Set POWFlagCode=$Extract(POWFlagCode,1,50)
	If ..POWFlagCode'=POWFlagCode {
		Set ..POWFlagCode=POWFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPOWLocationIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set POWLocationIEN=$Piece($Get(^|NS|DPT(PatientIEN,.52)),"^",6)
	Set POWLocationIEN=$Extract(POWLocationIEN,1,50)
	If ..POWLocationIEN'=POWLocationIEN {
		Set ..POWLocationIEN=POWLocationIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientEnteredByStaffIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientEnteredByStaffIEN=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",15)
	Set PatientEnteredByStaffIEN=$Extract(PatientEnteredByStaffIEN,1,50)
	If ..PatientEnteredByStaffIEN'=PatientEnteredByStaffIEN {
		Set ..PatientEnteredByStaffIEN=PatientEnteredByStaffIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientEnteredCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientEnteredCode=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",17)
	If PatientEnteredCode]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.098,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=PatientEnteredCode) {
				Set PatientEnteredCode=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set PatientEnteredCode=$Extract(PatientEnteredCode,1,50)
	If ..PatientEnteredCode'=PatientEnteredCode {
		Set ..PatientEnteredCode=PatientEnteredCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientEnteredCodeCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientEnteredCodeCode=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",17)
	Set PatientEnteredCodeCode=$Extract(PatientEnteredCodeCode,1,50)
	If ..PatientEnteredCodeCode'=PatientEnteredCodeCode {
		Set ..PatientEnteredCodeCode=PatientEnteredCodeCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientEnteredDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientEnteredDateTime=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",16)
	If ('##class(%FilemanTimeStamp).IsValid(PatientEnteredDateTime)) {
		Set PatientEnteredDateTime=""
	}
	If ..PatientEnteredDateTime'=PatientEnteredDateTime {
		Set ..PatientEnteredDateTime=PatientEnteredDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientEnteredFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientEnteredFMDate=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",16)
	Set PatientEnteredFMDate=$Extract(PatientEnteredFMDate,1,50)
	If ..PatientEnteredFMDate'=PatientEnteredFMDate {
		Set ..PatientEnteredFMDate=PatientEnteredFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientEnteredRemark">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientEnteredRemark=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",10)
	Set PatientEnteredRemark=$Extract(PatientEnteredRemark,1,100)
	If ..PatientEnteredRemark'=PatientEnteredRemark {
		Set ..PatientEnteredRemark=PatientEnteredRemark
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientFirstName">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//DONE 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//Get patient first name.
	Set Flag=0
	Set PatientFirstName=$Piece($Piece($Get(^|NS|DPT(PatientIEN,0)),"^",1),",",2)
	Set PatientFirstName=$Extract(PatientFirstName,1,50)
	If ..PatientFirstName'=PatientFirstName {
		Set ..PatientFirstName=PatientFirstName
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientICN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientICN=$Piece($Get(^|NS|DPT(PatientIEN,"MPI")),"^",1)
	Set PatientICN=$Extract(PatientICN,1,50)
	If ..PatientICN'=PatientICN {
		Set ..PatientICN=PatientICN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientLastName">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//DONE 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//Get patient last name.
	Set Flag=0
	Set PatientLastName=$Piece($Piece($Get(^|NS|DPT(PatientIEN,0)),"^",1),",",1)
	Set PatientLastName=$Extract(PatientLastName,1,50)
	If ..PatientLastName'=PatientLastName {
		Set ..PatientLastName=PatientLastName
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientMissingCity">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientMissingCity=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",8)
	Set PatientMissingCity=$Extract(PatientMissingCity,1,50)
	If ..PatientMissingCity'=PatientMissingCity {
		Set ..PatientMissingCity=PatientMissingCity
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientMissingDateTime">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientMissingDateTime=$Piece($Get(^|NS|DPT(PatientIEN,.15)),"^",3)
	If ('##class(%FilemanTimeStamp).IsValid(PatientMissingDateTime)) {
		Set PatientMissingDateTime=""
	}
	If ..PatientMissingDateTime'=PatientMissingDateTime {
		Set ..PatientMissingDateTime=PatientMissingDateTime
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientMissingFMDate">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientMissingFMDate=$Piece($Get(^|NS|DPT(PatientIEN,.15)),"^",3)
	Set PatientMissingFMDate=$Extract(PatientMissingFMDate,1,50)
	If ..PatientMissingFMDate'=PatientMissingFMDate {
		Set ..PatientMissingFMDate=PatientMissingFMDate
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientMissingSource">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientMissingSource=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",7)
	If PatientMissingSource]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.1657,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=PatientMissingSource) {
				Set PatientMissingSource=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set PatientMissingSource=$Extract(PatientMissingSource,1,50)
	If ..PatientMissingSource'=PatientMissingSource {
		Set ..PatientMissingSource=PatientMissingSource
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientMissingSourceCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientMissingSourceCode=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",7)
	Set PatientMissingSourceCode=$Extract(PatientMissingSourceCode,1,50)
	If ..PatientMissingSourceCode'=PatientMissingSourceCode {
		Set ..PatientMissingSourceCode=PatientMissingSourceCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientMissingStateIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientMissingStateIEN=$Piece($Get(^|NS|DPT(PatientIEN,"INE")),"^",9)
	Set PatientMissingStateIEN=$Extract(PatientMissingStateIEN,1,50)
	If ..PatientMissingStateIEN'=PatientMissingStateIEN {
		Set ..PatientMissingStateIEN=PatientMissingStateIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientName">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientName=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",1)
	Set PatientName=$Extract(PatientName,1,100)
	If ..PatientName'=PatientName {
		Set ..PatientName=PatientName
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientSSN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientSSN=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",9)
	Set PatientSSN=$Extract(PatientSSN,1,50)
	If ..PatientSSN'=PatientSSN {
		Set ..PatientSSN=PatientSSN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPatientTypeIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PatientTypeIEN=$Piece($Get(^|NS|DPT(PatientIEN,"TYPE")),"^",1)
	Set PatientTypeIEN=$Extract(PatientTypeIEN,1,50)
	If ..PatientTypeIEN'=PatientTypeIEN {
		Set ..PatientTypeIEN=PatientTypeIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPercentServiceConnect">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PercentServiceConnect=$Piece($Get(^|NS|DPT(PatientIEN,.3)),"^",2)
	Set:(PercentServiceConnect]"") PercentServiceConnect=+PercentServiceConnect
	If ..PercentServiceConnect'=PercentServiceConnect {
		Set ..PercentServiceConnect=PercentServiceConnect
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPeriodOfServiceIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PeriodOfServiceIEN=$Piece($Get(^|NS|DPT(PatientIEN,.32)),"^",3)
	Set PeriodOfServiceIEN=$Extract(PeriodOfServiceIEN,1,50)
	If ..PeriodOfServiceIEN'=PeriodOfServiceIEN {
		Set ..PeriodOfServiceIEN=PeriodOfServiceIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPreferredInstitutionIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PreferredInstitutionIEN=$Piece($Get(^|NS|DPT(PatientIEN,"ENR")),"^",2)
	Set PreferredInstitutionIEN=$Extract(PreferredInstitutionIEN,1,50)
	If ..PreferredInstitutionIEN'=PreferredInstitutionIEN {
		Set ..PreferredInstitutionIEN=PreferredInstitutionIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPreferredInstitutionSource">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PreferredInstitutionSource=$Piece($Get(^|NS|DPT(PatientIEN,"ENR")),"^",3)
	If PreferredInstitutionSource]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,27.03,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=PreferredInstitutionSource) {
				Set PreferredInstitutionSource=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set PreferredInstitutionSource=$Extract(PreferredInstitutionSource,1,50)
	If ..PreferredInstitutionSource'=PreferredInstitutionSource {
		Set ..PreferredInstitutionSource=PreferredInstitutionSource
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPreferredInstitutionSourceCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PreferredInstitutionSourceCode=$Piece($Get(^|NS|DPT(PatientIEN,"ENR")),"^",3)
	Set PreferredInstitutionSourceCode=$Extract(PreferredInstitutionSourceCode,1,50)
	If ..PreferredInstitutionSourceCode'=PreferredInstitutionSourceCode {
		Set ..PreferredInstitutionSourceCode=PreferredInstitutionSourceCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPseudoSSNReason">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PseudoSSNReason=$Piece($Get(^|NS|DPT(PatientIEN,"SSN")),"^",1)
	If PseudoSSNReason]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.0906,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=PseudoSSNReason) {
				Set PseudoSSNReason=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set PseudoSSNReason=$Extract(PseudoSSNReason,1,50)
	If ..PseudoSSNReason'=PseudoSSNReason {
		Set ..PseudoSSNReason=PseudoSSNReason
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setPseudoSSNReasonCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set PseudoSSNReasonCode=$Piece($Get(^|NS|DPT(PatientIEN,"SSN")),"^",1)
	Set PseudoSSNReasonCode=$Extract(PseudoSSNReasonCode,1,50)
	If ..PseudoSSNReasonCode'=PseudoSSNReasonCode {
		Set ..PseudoSSNReasonCode=PseudoSSNReasonCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setRadiationExposureCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set RadiationExposureCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",12)
	If RadiationExposureCode]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.3212,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=RadiationExposureCode) {
				Set RadiationExposureCode=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set RadiationExposureCode=$Extract(RadiationExposureCode,1,50)
	If ..RadiationExposureCode'=RadiationExposureCode {
		Set ..RadiationExposureCode=RadiationExposureCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setRadiationExposureCodeCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set RadiationExposureCodeCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",12)
	Set RadiationExposureCodeCode=$Extract(RadiationExposureCodeCode,1,50)
	If ..RadiationExposureCodeCode'=RadiationExposureCodeCode {
		Set ..RadiationExposureCodeCode=RadiationExposureCodeCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setReligionIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set ReligionIEN=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",8)
	Set ReligionIEN=$Extract(ReligionIEN,1,50)
	If ..ReligionIEN'=ReligionIEN {
		Set ..ReligionIEN=ReligionIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSHADFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SHADFlag=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",15)
	Set SHADFlag=$Case(SHADFlag,"1":"Y","0":"N",:$Extract(SHADFlag,1))
	Set SHADFlag=$Extract(SHADFlag,1,1)
	If ..SHADFlag'=SHADFlag {
		Set ..SHADFlag=SHADFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSHADFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SHADFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",15)
	Set SHADFlagCode=$Extract(SHADFlagCode,1,50)
	If ..SHADFlagCode'=SHADFlagCode {
		Set ..SHADFlagCode=SHADFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSSNVerificationStatus">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SSNVerificationStatus=$Piece($Get(^|NS|DPT(PatientIEN,"SSN")),"^",2)
	If SSNVerificationStatus]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.0907,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=SSNVerificationStatus) {
				Set SSNVerificationStatus=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set SSNVerificationStatus=$Extract(SSNVerificationStatus,1,50)
	If ..SSNVerificationStatus'=SSNVerificationStatus {
		Set ..SSNVerificationStatus=SSNVerificationStatus
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSSNVerificationStatusCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SSNVerificationStatusCode=$Piece($Get(^|NS|DPT(PatientIEN,"SSN")),"^",2)
	Set SSNVerificationStatusCode=$Extract(SSNVerificationStatusCode,1,50)
	If ..SSNVerificationStatusCode'=SSNVerificationStatusCode {
		Set ..SSNVerificationStatusCode=SSNVerificationStatusCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setScrSSN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set ScrSSN=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",9)
	Set ScrSSN=$Extract(ScrSSN,1,50)
	If ..ScrSSN'=ScrSSN {
		Set ..ScrSSN=ScrSSN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSelfIdentifiedGender">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SelfIdentifiedGender=$Piece($Get(^|NS|DPT(PatientIEN,.24)),"^",4)
	If SelfIdentifiedGender]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.024,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=SelfIdentifiedGender) {
				Set SelfIdentifiedGender=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set SelfIdentifiedGender=$Extract(SelfIdentifiedGender,1,50)
	If ..SelfIdentifiedGender'=SelfIdentifiedGender {
		Set ..SelfIdentifiedGender=SelfIdentifiedGender
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSelfIdentifiedGenderCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SelfIdentifiedGenderCode=$Piece($Get(^|NS|DPT(PatientIEN,.24)),"^",4)
	Set SelfIdentifiedGenderCode=$Extract(SelfIdentifiedGenderCode,1,50)
	If ..SelfIdentifiedGenderCode'=SelfIdentifiedGenderCode {
		Set ..SelfIdentifiedGenderCode=SelfIdentifiedGenderCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSensitiveFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//DONE 07/13/18: Special Handling Flag Set. - done/checked mlb 1/30/2018
	//"0":"N","1":"Y",:$Extract(SensitiveFlag,1)
	Set Flag=0
	Set SensitiveFlag=$Piece($Get(^|NS|DGSL(38.1,PatientIEN,0)),"^",2)
	Set SensitiveFlag=$Case(SensitiveFlag,"0":"N","1":"Y",:$Extract(SensitiveFlag,1))
	Set SensitiveFlag=$Extract(SensitiveFlag,1,1)
	If ..SensitiveFlag'=SensitiveFlag {
		Set ..SensitiveFlag=SensitiveFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSensitiveFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SensitiveFlagCode=$Piece($Get(^|NS|DGSL(38.1,PatientIEN,0)),"^",2)
	Set SensitiveFlagCode=$Extract(SensitiveFlagCode,1,50)
	If ..SensitiveFlagCode'=SensitiveFlagCode {
		Set ..SensitiveFlagCode=SensitiveFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setServiceConnectedFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set ServiceConnectedFlag=$Piece($Get(^|NS|DPT(PatientIEN,.3)),"^",1)
	Set ServiceConnectedFlag=$Case(ServiceConnectedFlag,"Y":"Y","N":"N",:$Extract(ServiceConnectedFlag,1))
	Set ServiceConnectedFlag=$Extract(ServiceConnectedFlag,1,1)
	If ..ServiceConnectedFlag'=ServiceConnectedFlag {
		Set ..ServiceConnectedFlag=ServiceConnectedFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setServiceConnectedFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set ServiceConnectedFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.3)),"^",1)
	Set ServiceConnectedFlagCode=$Extract(ServiceConnectedFlagCode,1,50)
	If ..ServiceConnectedFlagCode'=ServiceConnectedFlagCode {
		Set ..ServiceConnectedFlagCode=ServiceConnectedFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSouthwestAsiaCondition">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SouthwestAsiaCondition=$Piece($Get(^|NS|DPT(PatientIEN,.322)),"^",13)
	If SouthwestAsiaCondition]"" {
		Set Codes=$Piece($Get(^|NS|DD(2,.322013,0)),"^",3)
		Set zz=1
		While ($Piece(Codes,";",zz)]"") {
			Set Code=$Piece($Piece(Codes,";",zz),":",1)
			If (Code=SouthwestAsiaCondition) {
				Set SouthwestAsiaCondition=$Piece($Piece(Codes,";",zz),":",2)
			}
			Set zz=zz+1
		}
		Kill zz,Codes,Code
		}
	Set SouthwestAsiaCondition=$Extract(SouthwestAsiaCondition,1,50)
	If ..SouthwestAsiaCondition'=SouthwestAsiaCondition {
		Set ..SouthwestAsiaCondition=SouthwestAsiaCondition
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setSouthwestAsiaConditionCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set SouthwestAsiaConditionCode=$Piece($Get(^|NS|DPT(PatientIEN,.322)),"^",13)
	Set SouthwestAsiaConditionCode=$Extract(SouthwestAsiaConditionCode,1,50)
	If ..SouthwestAsiaConditionCode'=SouthwestAsiaConditionCode {
		Set ..SouthwestAsiaConditionCode=SouthwestAsiaConditionCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setStateCountyIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set StateCountyIEN=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",7)
	Set StateCountyIEN=$Extract(StateCountyIEN,1,50)
	If ..StateCountyIEN'=StateCountyIEN {
		Set ..StateCountyIEN=StateCountyIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setStateIEN">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set StateIEN=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",5)
	Set StateIEN=$Extract(StateIEN,1,50)
	If ..StateIEN'=StateIEN {
		Set ..StateIEN=StateIEN
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setStreetAddress1">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set StreetAddress1=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",1)
	Set StreetAddress1=$Extract(StreetAddress1,1,50)
	If ..StreetAddress1'=StreetAddress1 {
		Set ..StreetAddress1=StreetAddress1
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setStreetAddress2">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set StreetAddress2=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",2)
	Set StreetAddress2=$Extract(StreetAddress2,1,50)
	If ..StreetAddress2'=StreetAddress2 {
		Set ..StreetAddress2=StreetAddress2
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setTestPatientFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set TestPatientFlag=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",21)
	Set TestPatientFlag=$Case(TestPatientFlag,"1":"Y","2":"N",:$Extract(TestPatientFlag,1))
	Set TestPatientFlag=$Extract(TestPatientFlag,1,1)
	If ..TestPatientFlag'=TestPatientFlag {
		Set ..TestPatientFlag=TestPatientFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setTestPatientFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set TestPatientFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,0)),"^",21)
	Set TestPatientFlagCode=$Extract(TestPatientFlagCode,1,50)
	If ..TestPatientFlagCode'=TestPatientFlagCode {
		Set ..TestPatientFlagCode=TestPatientFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setVeteranFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set VeteranFlag=$Piece($Get(^|NS|DPT(PatientIEN,"VET")),"^",1)
	Set VeteranFlag=$Case(VeteranFlag,"Y":"Y","N":"N",:$Extract(VeteranFlag,1))
	Set VeteranFlag=$Extract(VeteranFlag,1,1)
	If ..VeteranFlag'=VeteranFlag {
		Set ..VeteranFlag=VeteranFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setVeteranFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set VeteranFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,"VET")),"^",1)
	Set VeteranFlagCode=$Extract(VeteranFlagCode,1,50)
	If ..VeteranFlagCode'=VeteranFlagCode {
		Set ..VeteranFlagCode=VeteranFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setVeteranTransportationProgramFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set VeteranTransportationProgramFlag=$Piece($Get(^|NS|DPT(PatientIEN,3000)),"^",1)
	Set VeteranTransportationProgramFlag=$Case(VeteranTransportationProgramFlag,"0":"N","1":"Y",:$Extract(VeteranTransportationProgramFlag,1))
	Set VeteranTransportationProgramFlag=$Extract(VeteranTransportationProgramFlag,1,1)
	If ..VeteranTransportationProgramFlag'=VeteranTransportationProgramFlag {
		Set ..VeteranTransportationProgramFlag=VeteranTransportationProgramFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setVeteranTransportationProgramFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set VeteranTransportationProgramFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,3000)),"^",1)
	Set VeteranTransportationProgramFlagCode=$Extract(VeteranTransportationProgramFlagCode,1,50)
	If ..VeteranTransportationProgramFlagCode'=VeteranTransportationProgramFlagCode {
		Set ..VeteranTransportationProgramFlagCode=VeteranTransportationProgramFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setVietnamServiceFlag">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set VietnamServiceFlag=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",1)
	Set VietnamServiceFlag=$Extract(VietnamServiceFlag,1,1)
	If ..VietnamServiceFlag'=VietnamServiceFlag {
		Set ..VietnamServiceFlag=VietnamServiceFlag
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setVietnamServiceFlagCode">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set VietnamServiceFlagCode=$Piece($Get(^|NS|DPT(PatientIEN,.321)),"^",1)
	Set VietnamServiceFlagCode=$Extract(VietnamServiceFlagCode,1,50)
	If ..VietnamServiceFlagCode'=VietnamServiceFlagCode {
		Set ..VietnamServiceFlagCode=VietnamServiceFlagCode
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setZip">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set Zip=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",6)
	Set Zip=$Extract(Zip,1,50)
	If ..Zip'=Zip {
		Set ..Zip=Zip
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="setZip4">
<FormalSpec>NS:%String,PatientIEN:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set Flag=0
	Set Zip4=$Piece($Get(^|NS|DPT(PatientIEN,.11)),"^",12)
	Set Zip4=$Extract(Zip4,1,50)
	If ..Zip4'=Zip4 {
		Set ..Zip4=Zip4
		Set Flag=1
	}
	Quit Flag
]]></Implementation>
</Method>

<Method name="CheckVX130ToVISTA">
<ClassMethod>1</ClassMethod>
<FormalSpec>Sta3n:%Integer,StartIEN:%String=0,EndIEN:%Integer=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Write Sta3n,!,$ZDateTime($H,3),!
	Set VistaSite=##class(VX130.VistaSite).%OpenId(Sta3n)
	Set NS=VistaSite.VistaSiteNamespace
	Set LastIEN=""
	Set Count=0
	Set:LastIEN="" LastIEN=$Order(^|NS|DPT("A"),-1)
	Set SQL="SELECT PatientIEN FROM SPatient.SPatient_2_v123 WHERE CAST(PatientIEN As Numeric)>="_StartIEN_" AND CAST(PatientIEN As Numeric)<="_EndIEN_"  AND Sta3n="_Sta3n_" AND OpCode IS NULL ORDER BY CAST(PatientIEN As Numeric)"
	//Write SQL,!
	Set tStatement=##class(%SQL.Statement).%New()
	Set Status=tStatement.%Prepare(SQL)
	Set rSet=tStatement.%Execute()
	While(rSet.%Next()) {
		Set PatientIEN=rSet.PatientIEN
		Set LastIEN=PatientIEN
		Set Count=Count+1
		If $Get(^|NS|DPT(D0,0))=""
		{
			Set qcid=##class(QC.QualityCheckHistory).GetID("VX130",Sta3n,..%ClassName(1))
			Do ##class(QC.Detail).AddEntry(qcid,Sta3n_"||"_$Replace(LastIEN,",","||"),"1")
		}
		If '(Count#10000) Do ##class(QC.QualityCheckHistory).UpdateDQStatus("VX130",Sta3n,..%ClassName(1),LastIEN)
	}
	Do ##class(QC.QualityCheckHistory).UpdateDQStatus("VX130",Sta3n,..%ClassName(1),LastIEN)
	Do ##class(QC.QualityCheckHistory).EndQualityCheck("VX130",Sta3n,..%ClassName(1))
	Quit
]]></Implementation>
</Method>

<Method name="ToJSONObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
	Set oref=..%OpenId(id,0,.sc)
	Set jsonObj=##class(%DynamicObject).%New()
	If $IsObject(oref) {
		Set jsonObj.Sta3n=+oref.Sta3n
		Set jsonObj.PatientIEN=oref.PatientIEN
		Set:oref.PatientFirstName]"" jsonObj.PatientFirstName=oref.PatientFirstName
		Set:oref.PatientLastName]"" jsonObj.PatientLastName=oref.PatientLastName
		Set:oref.PatientName]"" jsonObj.PatientName=oref.PatientName
		Set:oref.Gender]"" jsonObj.Gender=oref.Gender
		Set:oref.GenderCode]"" jsonObj.GenderCode=oref.GenderCode
		Set:oref.BirthDateTime]"" jsonObj.BirthDateTime=+oref.BirthDateTime
		Set:oref.BirthFMDate]"" jsonObj.BirthFMDate=oref.BirthFMDate
		Set:oref.MaritalStatusIEN]"" jsonObj.MaritalStatusIEN=oref.MaritalStatusIEN
		Set:oref.ReligionIEN]"" jsonObj.ReligionIEN=oref.ReligionIEN
		Set:oref.DuplicateRecordStatus]"" jsonObj.DuplicateRecordStatus=oref.DuplicateRecordStatus
		Set:oref.DuplicateRecordStatusCode]"" jsonObj.DuplicateRecordStatusCode=oref.DuplicateRecordStatusCode
		Set:oref.DestinationMergePatientIEN]"" jsonObj.DestinationMergePatientIEN=oref.DestinationMergePatientIEN
		Set:oref.PatientSSN]"" jsonObj.PatientSSN=oref.PatientSSN
		Set:oref.ScrSSN]"" jsonObj.ScrSSN=oref.ScrSSN
		Set:oref.PseudoSSNReason]"" jsonObj.PseudoSSNReason=oref.PseudoSSNReason
		Set:oref.PseudoSSNReasonCode]"" jsonObj.PseudoSSNReasonCode=oref.PseudoSSNReasonCode
		Set:oref.SSNVerificationStatus]"" jsonObj.SSNVerificationStatus=oref.SSNVerificationStatus
		Set:oref.SSNVerificationStatusCode]"" jsonObj.SSNVerificationStatusCode=oref.SSNVerificationStatusCode
		Set:oref.PatientEnteredRemark]"" jsonObj.PatientEnteredRemark=oref.PatientEnteredRemark
		Set:oref.PatientEnteredByStaffIEN]"" jsonObj.PatientEnteredByStaffIEN=oref.PatientEnteredByStaffIEN
		Set:oref.PatientEnteredDateTime]"" jsonObj.PatientEnteredDateTime=+oref.PatientEnteredDateTime
		Set:oref.PatientEnteredFMDate]"" jsonObj.PatientEnteredFMDate=oref.PatientEnteredFMDate
		Set:oref.PatientEnteredCode]"" jsonObj.PatientEnteredCode=oref.PatientEnteredCode
		Set:oref.PatientEnteredCodeCode]"" jsonObj.PatientEnteredCodeCode=oref.PatientEnteredCodeCode
		Set:oref.StreetAddress1]"" jsonObj.StreetAddress1=oref.StreetAddress1
		Set:oref.Zip4]"" jsonObj.Zip4=oref.Zip4
		Set:oref.StreetAddress2]"" jsonObj.StreetAddress2=oref.StreetAddress2
		Set:oref.City]"" jsonObj.City=oref.City
		Set:oref.StateIEN]"" jsonObj.StateIEN=oref.StateIEN
		Set:oref.Zip]"" jsonObj.Zip=oref.Zip
		Set:oref.StateCountyIEN]"" jsonObj.StateCountyIEN=oref.StateCountyIEN
		Set:oref.BadAddressIndicator]"" jsonObj.BadAddressIndicator=oref.BadAddressIndicator
		Set:oref.BadAddressIndicatorCode]"" jsonObj.BadAddressIndicatorCode=oref.BadAddressIndicatorCode
		Set:oref.CurrentMeansTestStatusIEN]"" jsonObj.CurrentMeansTestStatusIEN=oref.CurrentMeansTestStatusIEN
		Set:oref.IneligibleDateTime]"" jsonObj.IneligibleDateTime=+oref.IneligibleDateTime
		Set:oref.IneligibleFMDate]"" jsonObj.IneligibleFMDate=oref.IneligibleFMDate
		Set:oref.PatientMissingDateTime]"" jsonObj.PatientMissingDateTime=+oref.PatientMissingDateTime
		Set:oref.PatientMissingFMDate]"" jsonObj.PatientMissingFMDate=oref.PatientMissingFMDate
		Set:oref.IneligibleSource]"" jsonObj.IneligibleSource=oref.IneligibleSource
		Set:oref.IneligibleSourceCode]"" jsonObj.IneligibleSourceCode=oref.IneligibleSourceCode
		Set:oref.IneligibleCity]"" jsonObj.IneligibleCity=oref.IneligibleCity
		Set:oref.IneligibleStateIEN]"" jsonObj.IneligibleStateIEN=oref.IneligibleStateIEN
		Set:oref.IneligibleVAROReason]"" jsonObj.IneligibleVAROReason=oref.IneligibleVAROReason
		Set:oref.PatientMissingSource]"" jsonObj.PatientMissingSource=oref.PatientMissingSource
		Set:oref.PatientMissingSourceCode]"" jsonObj.PatientMissingSourceCode=oref.PatientMissingSourceCode
		Set:oref.PatientMissingCity]"" jsonObj.PatientMissingCity=oref.PatientMissingCity
		Set:oref.PatientMissingStateIEN]"" jsonObj.PatientMissingStateIEN=oref.PatientMissingStateIEN
		Set:oref.EmergencyResponseIndicator]"" jsonObj.EmergencyResponseIndicator=oref.EmergencyResponseIndicator
		Set:oref.EmergencyResponseIndicatorCode]"" jsonObj.EmergencyResponseIndicatorCode=oref.EmergencyResponseIndicatorCode
		Set:oref.ServiceConnectedFlag]"" jsonObj.ServiceConnectedFlag=oref.ServiceConnectedFlag
		Set:oref.ServiceConnectedFlagCode]"" jsonObj.ServiceConnectedFlagCode=oref.ServiceConnectedFlagCode
		Set:oref.PercentServiceConnect]"" jsonObj.PercentServiceConnect=oref.PercentServiceConnect
		Set:oref.IneligibleReason]"" jsonObj.IneligibleReason=oref.IneligibleReason
		Set:oref.FederalAgencyIEN]"" jsonObj.FederalAgencyIEN=oref.FederalAgencyIEN
		Set:oref.GovernmentEmployeeFlag]"" jsonObj.GovernmentEmployeeFlag=oref.GovernmentEmployeeFlag
		Set:oref.GovernmentEmployeeFlagCode]"" jsonObj.GovernmentEmployeeFlagCode=oref.GovernmentEmployeeFlagCode
		Set:oref.InsuranceCoverageFlag]"" jsonObj.InsuranceCoverageFlag=oref.InsuranceCoverageFlag
		Set:oref.InsuranceCoverageFlagCode]"" jsonObj.InsuranceCoverageFlagCode=oref.InsuranceCoverageFlagCode
		Set:oref.VietnamServiceFlag]"" jsonObj.VietnamServiceFlag=oref.VietnamServiceFlag
		Set:oref.VietnamServiceFlagCode]"" jsonObj.VietnamServiceFlagCode=oref.VietnamServiceFlagCode
		Set:oref.AgentOrangeExposureFlag]"" jsonObj.AgentOrangeExposureFlag=oref.AgentOrangeExposureFlag
		Set:oref.AgentOrangeExposureFlagCode]"" jsonObj.AgentOrangeExposureFlagCode=oref.AgentOrangeExposureFlagCode
		Set:oref.IonizingRadiationExposureFlag]"" jsonObj.IonizingRadiationExposureFlag=oref.IonizingRadiationExposureFlag
		Set:oref.IonizingRadiationExposureFlagCode]"" jsonObj.IonizingRadiationExposureFlagCode=oref.IonizingRadiationExposureFlagCode
		Set:oref.SHADFlag]"" jsonObj.SHADFlag=oref.SHADFlag
		Set:oref.SHADFlagCode]"" jsonObj.SHADFlagCode=oref.SHADFlagCode
		Set:oref.RadiationExposureCode]"" jsonObj.RadiationExposureCode=oref.RadiationExposureCode
		Set:oref.RadiationExposureCodeCode]"" jsonObj.RadiationExposureCodeCode=oref.RadiationExposureCodeCode
		Set:oref.AgentOrangeLocationCode]"" jsonObj.AgentOrangeLocationCode=oref.AgentOrangeLocationCode
		Set:oref.AgentOrangeLocationCodeCode]"" jsonObj.AgentOrangeLocationCodeCode=oref.AgentOrangeLocationCodeCode
		Set:oref.FilipinoVeteranCode]"" jsonObj.FilipinoVeteranCode=oref.FilipinoVeteranCode
		Set:oref.FilipinoVeteranCodeCode]"" jsonObj.FilipinoVeteranCodeCode=oref.FilipinoVeteranCodeCode
		Set:oref.SouthwestAsiaCondition]"" jsonObj.SouthwestAsiaCondition=oref.SouthwestAsiaCondition
		Set:oref.SouthwestAsiaConditionCode]"" jsonObj.SouthwestAsiaConditionCode=oref.SouthwestAsiaConditionCode
		Set:oref.PeriodOfServiceIEN]"" jsonObj.PeriodOfServiceIEN=oref.PeriodOfServiceIEN
		Set:oref.DeathDateTime]"" jsonObj.DeathDateTime=+oref.DeathDateTime
		Set:oref.DeathFMDate]"" jsonObj.DeathFMDate=oref.DeathFMDate
		Set:oref.DeathEnteredByStaffIEN]"" jsonObj.DeathEnteredByStaffIEN=oref.DeathEnteredByStaffIEN
		Set:oref.DeathNotificationSource]"" jsonObj.DeathNotificationSource=oref.DeathNotificationSource
		Set:oref.DeathModifiedDateTime]"" jsonObj.DeathModifiedDateTime=+oref.DeathModifiedDateTime
		Set:oref.DeathModifiedFMDate]"" jsonObj.DeathModifiedFMDate=oref.DeathModifiedFMDate
		Set:oref.DeathLastUpdatedByStaffIEN]"" jsonObj.DeathLastUpdatedByStaffIEN=oref.DeathLastUpdatedByStaffIEN
		Set:oref.CollateralSponsorPatientIEN]"" jsonObj.CollateralSponsorPatientIEN=oref.CollateralSponsorPatientIEN
		Set:oref.EligibilityIEN]"" jsonObj.EligibilityIEN=oref.EligibilityIEN
		Set:oref.EligibilityVACode]"" jsonObj.EligibilityVACode=oref.EligibilityVACode
		Set:oref.EligibilityStatus]"" jsonObj.EligibilityStatus=oref.EligibilityStatus
		Set:oref.EligibilityStatusCode]"" jsonObj.EligibilityStatusCode=oref.EligibilityStatusCode
		Set:oref.EligibilityStatusDateTime]"" jsonObj.EligibilityStatusDateTime=+oref.EligibilityStatusDateTime
		Set:oref.EligibilityStatusFMDate]"" jsonObj.EligibilityStatusFMDate=oref.EligibilityStatusFMDate
		Set:oref.EligibilityVerificationSource]"" jsonObj.EligibilityVerificationSource=oref.EligibilityVerificationSource
		Set:oref.EligibilityVerificationSourceCode]"" jsonObj.EligibilityVerificationSourceCode=oref.EligibilityVerificationSourceCode
		Set:oref.EligibilityInterimDateTime]"" jsonObj.EligibilityInterimDateTime=+oref.EligibilityInterimDateTime
		Set:oref.EligibilityInterimFMDate]"" jsonObj.EligibilityInterimFMDate=oref.EligibilityInterimFMDate
		Set:oref.EligibilityVerificationMethod]"" jsonObj.EligibilityVerificationMethod=oref.EligibilityVerificationMethod
		Set:oref.EligibilityEnteredStaffIEN]"" jsonObj.EligibilityEnteredStaffIEN=oref.EligibilityEnteredStaffIEN
		Set:oref.MedicaidEligibleFlag]"" jsonObj.MedicaidEligibleFlag=oref.MedicaidEligibleFlag
		Set:oref.MedicaidEligibleFlagCode]"" jsonObj.MedicaidEligibleFlagCode=oref.MedicaidEligibleFlagCode
		Set:oref.MedicaidInquireDateTime]"" jsonObj.MedicaidInquireDateTime=+oref.MedicaidInquireDateTime
		Set:oref.MedicaidInquireFMDate]"" jsonObj.MedicaidInquireFMDate=oref.MedicaidInquireFMDate
		Set:oref.MedicaidNumber]"" jsonObj.MedicaidNumber=oref.MedicaidNumber
		Set:oref.POWFlag]"" jsonObj.POWFlag=oref.POWFlag
		Set:oref.POWFlagCode]"" jsonObj.POWFlagCode=oref.POWFlagCode
		Set:oref.POWLocationIEN]"" jsonObj.POWLocationIEN=oref.POWLocationIEN
		Set:oref.CombatFlag]"" jsonObj.CombatFlag=oref.CombatFlag
		Set:oref.CombatFlagCode]"" jsonObj.CombatFlagCode=oref.CombatFlagCode
		Set:oref.CombatFromDate]"" jsonObj.CombatFromDate=+oref.CombatFromDate
		Set:oref.CombatFromFMDate]"" jsonObj.CombatFromFMDate=oref.CombatFromFMDate
		Set:oref.CombatToDate]"" jsonObj.CombatToDate=+oref.CombatToDate
		Set:oref.CombatToFMDate]"" jsonObj.CombatToFMDate=oref.CombatToFMDate
		Set:oref.CombatEligibilityEndDate]"" jsonObj.CombatEligibilityEndDate=+oref.CombatEligibilityEndDate
		Set:oref.CombatEligibilityEndFMDate]"" jsonObj.CombatEligibilityEndFMDate=oref.CombatEligibilityEndFMDate
		Set:oref.TestPatientFlag]"" jsonObj.TestPatientFlag=oref.TestPatientFlag
		Set:oref.TestPatientFlagCode]"" jsonObj.TestPatientFlagCode=oref.TestPatientFlagCode
		Set:oref.CurrentEnrollmentIEN]"" jsonObj.CurrentEnrollmentIEN=oref.CurrentEnrollmentIEN
		Set:oref.PreferredInstitutionIEN]"" jsonObj.PreferredInstitutionIEN=oref.PreferredInstitutionIEN
		Set:oref.PatientTypeIEN]"" jsonObj.PatientTypeIEN=oref.PatientTypeIEN
		Set:oref.PatientICN]"" jsonObj.PatientICN=oref.PatientICN
		Set:oref.FugitiveFelonFlag]"" jsonObj.FugitiveFelonFlag=oref.FugitiveFelonFlag
		Set:oref.FugitiveFelonFlagCode]"" jsonObj.FugitiveFelonFlagCode=oref.FugitiveFelonFlagCode
		Set:oref.FFFEnteredStaffIEN]"" jsonObj.FFFEnteredStaffIEN=oref.FFFEnteredStaffIEN
		Set:oref.FFFEnteredDateTime]"" jsonObj.FFFEnteredDateTime=+oref.FFFEnteredDateTime
		Set:oref.FFFEnteredFMDate]"" jsonObj.FFFEnteredFMDate=oref.FFFEnteredFMDate
		Set:oref.FFFRemovedStaffIEN]"" jsonObj.FFFRemovedStaffIEN=oref.FFFRemovedStaffIEN
		Set:oref.FFFRemovedDateTime]"" jsonObj.FFFRemovedDateTime=+oref.FFFRemovedDateTime
		Set:oref.FFFRemovedFMDate]"" jsonObj.FFFRemovedFMDate=oref.FFFRemovedFMDate
		Set:oref.FFFRemovedReason]"" jsonObj.FFFRemovedReason=oref.FFFRemovedReason
		Set:oref.VeteranFlag]"" jsonObj.VeteranFlag=oref.VeteranFlag
		Set:oref.VeteranFlagCode]"" jsonObj.VeteranFlagCode=oref.VeteranFlagCode
		Set:oref.ODSTreatmentDateTime]"" jsonObj.ODSTreatmentDateTime=+oref.ODSTreatmentDateTime
		Set:oref.ODSTreatmentFMDate]"" jsonObj.ODSTreatmentFMDate=oref.ODSTreatmentFMDate
		Set:oref.ODSRecalledCode]"" jsonObj.ODSRecalledCode=oref.ODSRecalledCode
		Set:oref.ODSRecalledCodeCode]"" jsonObj.ODSRecalledCodeCode=oref.ODSRecalledCodeCode
		Set:oref.ODSRankType]"" jsonObj.ODSRankType=oref.ODSRankType
		Set:oref.OperationDesertShieldRank]"" jsonObj.OperationDesertShieldRank=oref.OperationDesertShieldRank
		Set:oref.SensitiveFlag]"" jsonObj.SensitiveFlag=oref.SensitiveFlag
		Set:oref.SensitiveFlagCode]"" jsonObj.SensitiveFlagCode=oref.SensitiveFlagCode
		Set:oref.PreferredInstitutionSource]"" jsonObj.PreferredInstitutionSource=oref.PreferredInstitutionSource
		Set:oref.PreferredInstitutionSourceCode]"" jsonObj.PreferredInstitutionSourceCode=oref.PreferredInstitutionSourceCode
		Set:oref.VeteranTransportationProgramFlag]"" jsonObj.VeteranTransportationProgramFlag=oref.VeteranTransportationProgramFlag
		Set:oref.VeteranTransportationProgramFlagCode]"" jsonObj.VeteranTransportationProgramFlagCode=oref.VeteranTransportationProgramFlagCode
		Set:oref.SelfIdentifiedGender]"" jsonObj.SelfIdentifiedGender=oref.SelfIdentifiedGender
		Set:oref.SelfIdentifiedGenderCode]"" jsonObj.SelfIdentifiedGenderCode=oref.SelfIdentifiedGenderCode
		Set:oref.DeathDocumentationType]"" jsonObj.DeathDocumentationType=oref.DeathDocumentationType
		Set:oref.OpCode]"" jsonObj.OpCode=oref.OpCode
		Set:oref.VistaCreateDate]"" jsonObj.VistaCreateDate=oref.VistaCreateDate
		Set:oref.VistaEditDate]"" jsonObj.VistaEditDate=oref.VistaEditDate
	}
	Quit jsonObj
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SPatient.SPatient2v123D</DataLocation>
<DefaultData>SPatient2v123DefaultData</DefaultData>
<IdLocation>^SPatient.SPatient2v123D</IdLocation>
<IndexLocation>^SPatient.SPatient2v123I</IndexLocation>
<StreamLocation>^SPatient.SPatient2v123S</StreamLocation>
<ExtentSize>1000000</ExtentSize>
<Data name="SPatient2v123DefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AgentOrangeExposureFlag</Value>
</Value>
<Value name="3">
<Value>AgentOrangeExposureFlagCode</Value>
</Value>
<Value name="4">
<Value>AgentOrangeLocationCode</Value>
</Value>
<Value name="5">
<Value>AgentOrangeLocationCodeCode</Value>
</Value>
<Value name="6">
<Value>BadAddressIndicator</Value>
</Value>
<Value name="7">
<Value>BadAddressIndicatorCode</Value>
</Value>
<Value name="8">
<Value>BirthDateTime</Value>
</Value>
<Value name="9">
<Value>BirthFMDate</Value>
</Value>
<Value name="10">
<Value>City</Value>
</Value>
<Value name="11">
<Value>CollateralSponsorPatientIEN</Value>
</Value>
<Value name="12">
<Value>CombatEligibilityEndDate</Value>
</Value>
<Value name="13">
<Value>CombatEligibilityEndFMDate</Value>
</Value>
<Value name="14">
<Value>CombatFlag</Value>
</Value>
<Value name="15">
<Value>CombatFlagCode</Value>
</Value>
<Value name="16">
<Value>CombatFromDate</Value>
</Value>
<Value name="17">
<Value>CombatFromFMDate</Value>
</Value>
<Value name="18">
<Value>CombatToDate</Value>
</Value>
<Value name="19">
<Value>CombatToFMDate</Value>
</Value>
<Value name="20">
<Value>CurrentEnrollmentIEN</Value>
</Value>
<Value name="21">
<Value>CurrentMeansTestStatusIEN</Value>
</Value>
<Value name="22">
<Value>DeathDateTime</Value>
</Value>
<Value name="23">
<Value>DeathDocumentationType</Value>
</Value>
<Value name="24">
<Value>DeathEnteredByStaffIEN</Value>
</Value>
<Value name="25">
<Value>DeathFMDate</Value>
</Value>
<Value name="26">
<Value>DeathLastUpdatedByStaffIEN</Value>
</Value>
<Value name="27">
<Value>DeathModifiedDateTime</Value>
</Value>
<Value name="28">
<Value>DeathModifiedFMDate</Value>
</Value>
<Value name="29">
<Value>DeathNotificationSource</Value>
</Value>
<Value name="30">
<Value>DestinationMergePatientIEN</Value>
</Value>
<Value name="31">
<Value>DuplicateRecordStatus</Value>
</Value>
<Value name="32">
<Value>DuplicateRecordStatusCode</Value>
</Value>
<Value name="33">
<Value>EligibilityEnteredStaffIEN</Value>
</Value>
<Value name="34">
<Value>EligibilityIEN</Value>
</Value>
<Value name="35">
<Value>EligibilityInterimDateTime</Value>
</Value>
<Value name="36">
<Value>EligibilityInterimFMDate</Value>
</Value>
<Value name="37">
<Value>EligibilityStatus</Value>
</Value>
<Value name="38">
<Value>EligibilityStatusCode</Value>
</Value>
<Value name="39">
<Value>EligibilityStatusDateTime</Value>
</Value>
<Value name="40">
<Value>EligibilityStatusFMDate</Value>
</Value>
<Value name="41">
<Value>EligibilityVACode</Value>
</Value>
<Value name="42">
<Value>EligibilityVerificationMethod</Value>
</Value>
<Value name="43">
<Value>EligibilityVerificationSource</Value>
</Value>
<Value name="44">
<Value>EligibilityVerificationSourceCode</Value>
</Value>
<Value name="45">
<Value>EmergencyResponseIndicator</Value>
</Value>
<Value name="46">
<Value>EmergencyResponseIndicatorCode</Value>
</Value>
<Value name="47">
<Value>FFFEnteredDateTime</Value>
</Value>
<Value name="48">
<Value>FFFEnteredFMDate</Value>
</Value>
<Value name="49">
<Value>FFFEnteredStaffIEN</Value>
</Value>
<Value name="50">
<Value>FFFRemovedDateTime</Value>
</Value>
<Value name="51">
<Value>FFFRemovedFMDate</Value>
</Value>
<Value name="52">
<Value>FFFRemovedReason</Value>
</Value>
<Value name="53">
<Value>FFFRemovedStaffIEN</Value>
</Value>
<Value name="54">
<Value>FederalAgencyIEN</Value>
</Value>
<Value name="55">
<Value>FilipinoVeteranCode</Value>
</Value>
<Value name="56">
<Value>FilipinoVeteranCodeCode</Value>
</Value>
<Value name="57">
<Value>FugitiveFelonFlag</Value>
</Value>
<Value name="58">
<Value>FugitiveFelonFlagCode</Value>
</Value>
<Value name="59">
<Value>Gender</Value>
</Value>
<Value name="60">
<Value>GenderCode</Value>
</Value>
<Value name="61">
<Value>GovernmentEmployeeFlag</Value>
</Value>
<Value name="62">
<Value>GovernmentEmployeeFlagCode</Value>
</Value>
<Value name="63">
<Value>IneligibleCity</Value>
</Value>
<Value name="64">
<Value>IneligibleDateTime</Value>
</Value>
<Value name="65">
<Value>IneligibleFMDate</Value>
</Value>
<Value name="66">
<Value>IneligibleReason</Value>
</Value>
<Value name="67">
<Value>IneligibleSource</Value>
</Value>
<Value name="68">
<Value>IneligibleSourceCode</Value>
</Value>
<Value name="69">
<Value>IneligibleStateIEN</Value>
</Value>
<Value name="70">
<Value>IneligibleVAROReason</Value>
</Value>
<Value name="71">
<Value>InsuranceCoverageFlag</Value>
</Value>
<Value name="72">
<Value>InsuranceCoverageFlagCode</Value>
</Value>
<Value name="73">
<Value>IonizingRadiationExposureFlag</Value>
</Value>
<Value name="74">
<Value>IonizingRadiationExposureFlagCode</Value>
</Value>
<Value name="75">
<Value>MaritalStatusIEN</Value>
</Value>
<Value name="76">
<Value>MedicaidEligibleFlag</Value>
</Value>
<Value name="77">
<Value>MedicaidEligibleFlagCode</Value>
</Value>
<Value name="78">
<Value>MedicaidInquireDateTime</Value>
</Value>
<Value name="79">
<Value>MedicaidInquireFMDate</Value>
</Value>
<Value name="80">
<Value>MedicaidNumber</Value>
</Value>
<Value name="81">
<Value>ODSRankType</Value>
</Value>
<Value name="82">
<Value>ODSRecalledCode</Value>
</Value>
<Value name="83">
<Value>ODSRecalledCodeCode</Value>
</Value>
<Value name="84">
<Value>ODSTreatmentDateTime</Value>
</Value>
<Value name="85">
<Value>ODSTreatmentFMDate</Value>
</Value>
<Value name="86">
<Value>OpCode</Value>
</Value>
<Value name="87">
<Value>OperationDesertShieldRank</Value>
</Value>
<Value name="88">
<Value>POWFlag</Value>
</Value>
<Value name="89">
<Value>POWFlagCode</Value>
</Value>
<Value name="90">
<Value>POWLocationIEN</Value>
</Value>
<Value name="91">
<Value>PatientEnteredByStaffIEN</Value>
</Value>
<Value name="92">
<Value>PatientEnteredCode</Value>
</Value>
<Value name="93">
<Value>PatientEnteredCodeCode</Value>
</Value>
<Value name="94">
<Value>PatientEnteredDateTime</Value>
</Value>
<Value name="95">
<Value>PatientEnteredFMDate</Value>
</Value>
<Value name="96">
<Value>PatientEnteredRemark</Value>
</Value>
<Value name="97">
<Value>PatientFirstName</Value>
</Value>
<Value name="98">
<Value>PatientICN</Value>
</Value>
<Value name="99">
<Value>PatientLastName</Value>
</Value>
<Value name="100">
<Value>PatientMissingCity</Value>
</Value>
<Value name="101">
<Value>PatientMissingDateTime</Value>
</Value>
<Value name="102">
<Value>PatientMissingFMDate</Value>
</Value>
<Value name="103">
<Value>PatientMissingSource</Value>
</Value>
<Value name="104">
<Value>PatientMissingSourceCode</Value>
</Value>
<Value name="105">
<Value>PatientMissingStateIEN</Value>
</Value>
<Value name="106">
<Value>PatientName</Value>
</Value>
<Value name="107">
<Value>PatientSSN</Value>
</Value>
<Value name="108">
<Value>PatientTypeIEN</Value>
</Value>
<Value name="109">
<Value>PercentServiceConnect</Value>
</Value>
<Value name="110">
<Value>PeriodOfServiceIEN</Value>
</Value>
<Value name="111">
<Value>PreferredInstitutionIEN</Value>
</Value>
<Value name="112">
<Value>PreferredInstitutionSource</Value>
</Value>
<Value name="113">
<Value>PreferredInstitutionSourceCode</Value>
</Value>
<Value name="114">
<Value>PseudoSSNReason</Value>
</Value>
<Value name="115">
<Value>PseudoSSNReasonCode</Value>
</Value>
<Value name="116">
<Value>RadiationExposureCode</Value>
</Value>
<Value name="117">
<Value>RadiationExposureCodeCode</Value>
</Value>
<Value name="118">
<Value>ReligionIEN</Value>
</Value>
<Value name="119">
<Value>SHADFlag</Value>
</Value>
<Value name="120">
<Value>SHADFlagCode</Value>
</Value>
<Value name="121">
<Value>SSNVerificationStatus</Value>
</Value>
<Value name="122">
<Value>SSNVerificationStatusCode</Value>
</Value>
<Value name="123">
<Value>ScrSSN</Value>
</Value>
<Value name="124">
<Value>SelfIdentifiedGender</Value>
</Value>
<Value name="125">
<Value>SelfIdentifiedGenderCode</Value>
</Value>
<Value name="126">
<Value>SensitiveFlag</Value>
</Value>
<Value name="127">
<Value>SensitiveFlagCode</Value>
</Value>
<Value name="128">
<Value>ServiceConnectedFlag</Value>
</Value>
<Value name="129">
<Value>ServiceConnectedFlagCode</Value>
</Value>
<Value name="130">
<Value>SouthwestAsiaCondition</Value>
</Value>
<Value name="131">
<Value>SouthwestAsiaConditionCode</Value>
</Value>
<Value name="132">
<Value>StateCountyIEN</Value>
</Value>
<Value name="133">
<Value>StateIEN</Value>
</Value>
<Value name="134">
<Value>StreetAddress1</Value>
</Value>
<Value name="135">
<Value>StreetAddress2</Value>
</Value>
<Value name="136">
<Value>TestPatientFlag</Value>
</Value>
<Value name="137">
<Value>TestPatientFlagCode</Value>
</Value>
<Value name="138">
<Value>VeteranFlag</Value>
</Value>
<Value name="139">
<Value>VeteranFlagCode</Value>
</Value>
<Value name="140">
<Value>VeteranTransportationProgramFlag</Value>
</Value>
<Value name="141">
<Value>VeteranTransportationProgramFlagCode</Value>
</Value>
<Value name="142">
<Value>VietnamServiceFlag</Value>
</Value>
<Value name="143">
<Value>VietnamServiceFlagCode</Value>
</Value>
<Value name="144">
<Value>VistaCreateDate</Value>
</Value>
<Value name="145">
<Value>VistaEditDate</Value>
</Value>
<Value name="146">
<Value>Zip</Value>
</Value>
<Value name="147">
<Value>Zip4</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>10.61</AverageFieldSize>
</Property>
<Property name="AgentOrangeExposureFlag">
<Selectivity>5.7555%</Selectivity>
<OutlierSelectivity>.827333:"N"</OutlierSelectivity>
<AverageFieldSize>.89</AverageFieldSize>
</Property>
<Property name="AgentOrangeExposureFlagCode">
<Selectivity>5.7555%</Selectivity>
<OutlierSelectivity>.827333:"N"</OutlierSelectivity>
<AverageFieldSize>.89</AverageFieldSize>
</Property>
<Property name="AgentOrangeLocationCode">
<Selectivity>2.1889%</Selectivity>
<OutlierSelectivity>.934333:</OutlierSelectivity>
<AverageFieldSize>.46</AverageFieldSize>
</Property>
<Property name="AgentOrangeLocationCodeCode">
<Selectivity>2.1889%</Selectivity>
<OutlierSelectivity>.934333:</OutlierSelectivity>
<AverageFieldSize>.07</AverageFieldSize>
</Property>
<Property name="BadAddressIndicator">
<Selectivity>3.7333%</Selectivity>
<OutlierSelectivity>.925333:</OutlierSelectivity>
<AverageFieldSize>.93</AverageFieldSize>
</Property>
<Property name="BadAddressIndicatorCode">
<Selectivity>3.7333%</Selectivity>
<OutlierSelectivity>.925333:</OutlierSelectivity>
<AverageFieldSize>.07</AverageFieldSize>
</Property>
<Property name="BirthDateTime">
<Selectivity>0.0043%</Selectivity>
<AverageFieldSize>6.98</AverageFieldSize>
</Property>
<Property name="BirthFMDate">
<Selectivity>0.0043%</Selectivity>
<AverageFieldSize>6.98</AverageFieldSize>
</Property>
<Property name="City">
<Selectivity>0.0567%</Selectivity>
<AverageFieldSize>8.2</AverageFieldSize>
</Property>
<Property name="CollateralSponsorPatientIEN">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.987:</OutlierSelectivity>
<AverageFieldSize>.07</AverageFieldSize>
</Property>
<Property name="CombatEligibilityEndDate">
<Selectivity>0.0035%</Selectivity>
<OutlierSelectivity>.907:</OutlierSelectivity>
<AverageFieldSize>.65</AverageFieldSize>
</Property>
<Property name="CombatEligibilityEndFMDate">
<Selectivity>0.0035%</Selectivity>
<OutlierSelectivity>.907:</OutlierSelectivity>
<AverageFieldSize>.65</AverageFieldSize>
</Property>
<Property name="CombatFlag">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>.49</AverageFieldSize>
</Property>
<Property name="CombatFlagCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>.49</AverageFieldSize>
</Property>
<Property name="CombatFromDate">
<Selectivity>0.0276%</Selectivity>
<OutlierSelectivity>.928:</OutlierSelectivity>
<AverageFieldSize>.5</AverageFieldSize>
</Property>
<Property name="CombatFromFMDate">
<Selectivity>0.0276%</Selectivity>
<OutlierSelectivity>.928:</OutlierSelectivity>
<AverageFieldSize>.5</AverageFieldSize>
</Property>
<Property name="CombatToDate">
<Selectivity>0.0270%</Selectivity>
<OutlierSelectivity>.927667:</OutlierSelectivity>
<AverageFieldSize>.51</AverageFieldSize>
</Property>
<Property name="CombatToFMDate">
<Selectivity>0.0270%</Selectivity>
<OutlierSelectivity>.927667:</OutlierSelectivity>
<AverageFieldSize>.51</AverageFieldSize>
</Property>
<Property name="CurrentEnrollmentIEN">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.146:</OutlierSelectivity>
<AverageFieldSize>5.92</AverageFieldSize>
</Property>
<Property name="CurrentMeansTestStatusIEN">
<Selectivity>12.5000%</Selectivity>
<AverageFieldSize>.64</AverageFieldSize>
</Property>
<Property name="DeathDateTime">
<Selectivity>0.0026%</Selectivity>
<OutlierSelectivity>.611:</OutlierSelectivity>
<AverageFieldSize>4.47</AverageFieldSize>
</Property>
<Property name="DeathDocumentationType">
<Selectivity>0.1163%</Selectivity>
<OutlierSelectivity>.991667:</OutlierSelectivity>
<AverageFieldSize>.18</AverageFieldSize>
</Property>
<Property name="DeathEnteredByStaffIEN">
<Selectivity>0.0413%</Selectivity>
<OutlierSelectivity>.982667:</OutlierSelectivity>
<AverageFieldSize>.08</AverageFieldSize>
</Property>
<Property name="DeathFMDate">
<Selectivity>0.0026%</Selectivity>
<OutlierSelectivity>.611:</OutlierSelectivity>
<AverageFieldSize>4.47</AverageFieldSize>
</Property>
<Property name="DeathLastUpdatedByStaffIEN">
<Selectivity>0.0535%</Selectivity>
<OutlierSelectivity>.976:</OutlierSelectivity>
<AverageFieldSize>.11</AverageFieldSize>
</Property>
<Property name="DeathModifiedDateTime">
<Selectivity>0.0839%</Selectivity>
<OutlierSelectivity>.620333:</OutlierSelectivity>
<AverageFieldSize>3.54</AverageFieldSize>
</Property>
<Property name="DeathModifiedFMDate">
<Selectivity>0.0839%</Selectivity>
<OutlierSelectivity>.620333:</OutlierSelectivity>
<AverageFieldSize>3.54</AverageFieldSize>
</Property>
<Property name="DeathNotificationSource">
<Selectivity>4.8500%</Selectivity>
<OutlierSelectivity>.612:</OutlierSelectivity>
<AverageFieldSize>4.06</AverageFieldSize>
</Property>
<Property name="DestinationMergePatientIEN">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.997:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="DuplicateRecordStatus">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="DuplicateRecordStatusCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="EligibilityEnteredStaffIEN">
<Selectivity>0.1727%</Selectivity>
<OutlierSelectivity>.850667:.5</OutlierSelectivity>
<AverageFieldSize>1.92</AverageFieldSize>
</Property>
<Property name="EligibilityIEN">
<Selectivity>2.6551%</Selectivity>
<OutlierSelectivity>.389333:5</OutlierSelectivity>
<AverageFieldSize>1.14</AverageFieldSize>
</Property>
<Property name="EligibilityInterimDateTime">
<Selectivity>0.0009%</Selectivity>
<OutlierSelectivity>.949667:</OutlierSelectivity>
<AverageFieldSize>.35</AverageFieldSize>
</Property>
<Property name="EligibilityInterimFMDate">
<Selectivity>0.0009%</Selectivity>
<OutlierSelectivity>.949667:</OutlierSelectivity>
<AverageFieldSize>.35</AverageFieldSize>
</Property>
<Property name="EligibilityStatus">
<Selectivity>5.6833%</Selectivity>
<OutlierSelectivity>.886333:"VERIFIED"</OutlierSelectivity>
<AverageFieldSize>7.86</AverageFieldSize>
</Property>
<Property name="EligibilityStatusCode">
<Selectivity>5.6833%</Selectivity>
<OutlierSelectivity>.886333:"V"</OutlierSelectivity>
<AverageFieldSize>.93</AverageFieldSize>
</Property>
<Property name="EligibilityStatusDateTime">
<Selectivity>0.0208%</Selectivity>
<OutlierSelectivity>.108667:</OutlierSelectivity>
<AverageFieldSize>6.24</AverageFieldSize>
</Property>
<Property name="EligibilityStatusFMDate">
<Selectivity>0.0208%</Selectivity>
<OutlierSelectivity>.108667:</OutlierSelectivity>
<AverageFieldSize>6.24</AverageFieldSize>
</Property>
<Property name="EligibilityVACode">
<Selectivity>7.6208%</Selectivity>
<OutlierSelectivity>.390333:5</OutlierSelectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="EligibilityVerificationMethod">
<Selectivity>0.2171%</Selectivity>
<OutlierSelectivity>.293333:"CEV/VBA"</OutlierSelectivity>
<AverageFieldSize>8.36</AverageFieldSize>
</Property>
<Property name="EligibilityVerificationSource">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>3.45</AverageFieldSize>
</Property>
<Property name="EligibilityVerificationSourceCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>.95</AverageFieldSize>
</Property>
<Property name="EmergencyResponseIndicator">
<Selectivity>0.7333%</Selectivity>
<OutlierSelectivity>.992667:</OutlierSelectivity>
<AverageFieldSize>.06</AverageFieldSize>
</Property>
<Property name="EmergencyResponseIndicatorCode">
<Selectivity>0.7333%</Selectivity>
<OutlierSelectivity>.992667:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="FFFEnteredDateTime">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="FFFEnteredFMDate">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="FFFEnteredStaffIEN">
<Selectivity>0.0382%</Selectivity>
<OutlierSelectivity>.999:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="FFFRemovedDateTime">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999333:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="FFFRemovedFMDate">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999333:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="FFFRemovedReason">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999333:</OutlierSelectivity>
<AverageFieldSize>.02</AverageFieldSize>
</Property>
<Property name="FFFRemovedStaffIEN">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999333:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="FederalAgencyIEN">
<Selectivity>0.0561%</Selectivity>
<OutlierSelectivity>.996667:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="FilipinoVeteranCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="FilipinoVeteranCodeCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="FugitiveFelonFlag">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999667:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="FugitiveFelonFlagCode">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999667:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="Gender">
<Selectivity>6.6666%</Selectivity>
<OutlierSelectivity>.866667:"M"</OutlierSelectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="GenderCode">
<Selectivity>6.6666%</Selectivity>
<OutlierSelectivity>.866667:"M"</OutlierSelectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="GovernmentEmployeeFlag">
<Selectivity>0.3167%</Selectivity>
<OutlierSelectivity>.993667:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="GovernmentEmployeeFlagCode">
<Selectivity>0.3167%</Selectivity>
<OutlierSelectivity>.993667:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="IneligibleCity">
<Selectivity>0.0556%</Selectivity>
<OutlierSelectivity>.996:</OutlierSelectivity>
<AverageFieldSize>.03</AverageFieldSize>
</Property>
<Property name="IneligibleDateTime">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.988:</OutlierSelectivity>
<AverageFieldSize>.08</AverageFieldSize>
</Property>
<Property name="IneligibleFMDate">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.988:</OutlierSelectivity>
<AverageFieldSize>.08</AverageFieldSize>
</Property>
<Property name="IneligibleReason">
<Selectivity>0.0105%</Selectivity>
<OutlierSelectivity>.988:</OutlierSelectivity>
<AverageFieldSize>.23</AverageFieldSize>
</Property>
<Property name="IneligibleSource">
<Selectivity>0.2166%</Selectivity>
<OutlierSelectivity>.995667:</OutlierSelectivity>
<AverageFieldSize>.02</AverageFieldSize>
</Property>
<Property name="IneligibleSourceCode">
<Selectivity>0.2166%</Selectivity>
<OutlierSelectivity>.995667:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="IneligibleStateIEN">
<Selectivity>0.0556%</Selectivity>
<OutlierSelectivity>.996:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="IneligibleVAROReason">
<Selectivity>0.0253%</Selectivity>
<OutlierSelectivity>.998667:</OutlierSelectivity>
<AverageFieldSize>.03</AverageFieldSize>
</Property>
<Property name="InsuranceCoverageFlag">
<Selectivity>12.0889%</Selectivity>
<OutlierSelectivity>.637333:"N"</OutlierSelectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="InsuranceCoverageFlagCode">
<Selectivity>12.0889%</Selectivity>
<OutlierSelectivity>.637333:"N"</OutlierSelectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="IonizingRadiationExposureFlag">
<Selectivity>3.7111%</Selectivity>
<OutlierSelectivity>.888667:"N"</OutlierSelectivity>
<AverageFieldSize>.89</AverageFieldSize>
</Property>
<Property name="IonizingRadiationExposureFlagCode">
<Selectivity>3.7111%</Selectivity>
<OutlierSelectivity>.888667:"N"</OutlierSelectivity>
<AverageFieldSize>.89</AverageFieldSize>
</Property>
<Property name="MaritalStatusIEN">
<Selectivity>7.2143%</Selectivity>
<OutlierSelectivity>.495:2</OutlierSelectivity>
<AverageFieldSize>.94</AverageFieldSize>
</Property>
<Property name="MedicaidEligibleFlag">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>.7</AverageFieldSize>
</Property>
<Property name="MedicaidEligibleFlagCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>.7</AverageFieldSize>
</Property>
<Property name="MedicaidInquireDateTime">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.321:</OutlierSelectivity>
<AverageFieldSize>8</AverageFieldSize>
</Property>
<Property name="MedicaidInquireFMDate">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.321:</OutlierSelectivity>
<AverageFieldSize>8</AverageFieldSize>
</Property>
<Property name="MedicaidNumber">
<Selectivity>0.0050%</Selectivity>
<OutlierSelectivity>.995:</OutlierSelectivity>
<AverageFieldSize>.04</AverageFieldSize>
</Property>
<Property name="ODSRankType">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="ODSRecalledCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="ODSRecalledCodeCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="ODSTreatmentDateTime">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="ODSTreatmentFMDate">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="OpCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="OperationDesertShieldRank">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="POWFlag">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>.61</AverageFieldSize>
</Property>
<Property name="POWFlagCode">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>.61</AverageFieldSize>
</Property>
<Property name="POWLocationIEN">
<Selectivity>0.3667%</Selectivity>
<OutlierSelectivity>.992667:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="PatientEnteredByStaffIEN">
<Selectivity>0.1113%</Selectivity>
<OutlierSelectivity>.168:</OutlierSelectivity>
<AverageFieldSize>3.46</AverageFieldSize>
</Property>
<Property name="PatientEnteredCode">
<Selectivity>0.0667%</Selectivity>
<OutlierSelectivity>.999333:</OutlierSelectivity>
<AverageFieldSize>.01</AverageFieldSize>
</Property>
<Property name="PatientEnteredCodeCode">
<Selectivity>0.0667%</Selectivity>
<OutlierSelectivity>.999333:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="PatientEnteredDateTime">
<Selectivity>0.0099%</Selectivity>
<OutlierSelectivity>.159333:</OutlierSelectivity>
<AverageFieldSize>5.88</AverageFieldSize>
</Property>
<Property name="PatientEnteredFMDate">
<Selectivity>0.0099%</Selectivity>
<OutlierSelectivity>.159333:</OutlierSelectivity>
<AverageFieldSize>5.88</AverageFieldSize>
</Property>
<Property name="PatientEnteredRemark">
<Selectivity>0.0072%</Selectivity>
<OutlierSelectivity>.468333:</OutlierSelectivity>
<AverageFieldSize>16.94</AverageFieldSize>
</Property>
<Property name="PatientFirstName">
<Selectivity>0.0093%</Selectivity>
<AverageFieldSize>10.15</AverageFieldSize>
</Property>
<Property name="PatientICN">
<Selectivity>0.0002%</Selectivity>
<AverageFieldSize>9.97</AverageFieldSize>
</Property>
<Property name="PatientIEN">
<Selectivity>0.0005%</Selectivity>
<AverageFieldSize>5.61</AverageFieldSize>
</Property>
<Property name="PatientLastName">
<Selectivity>0.0176%</Selectivity>
<AverageFieldSize>6.55</AverageFieldSize>
</Property>
<Property name="PatientMissingCity">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="PatientMissingDateTime">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="PatientMissingFMDate">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="PatientMissingSource">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="PatientMissingSourceCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="PatientMissingStateIEN">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="PatientName">
<Selectivity>0.0001%</Selectivity>
<AverageFieldSize>17.7</AverageFieldSize>
</Property>
<Property name="PatientSSN">
<Selectivity>0.0002%</Selectivity>
<AverageFieldSize>9</AverageFieldSize>
</Property>
<Property name="PatientTypeIEN">
<Selectivity>5.6033%</Selectivity>
<OutlierSelectivity>.439667:12</OutlierSelectivity>
<AverageFieldSize>1.49</AverageFieldSize>
</Property>
<Property name="PercentServiceConnect">
<Selectivity>3.9727%</Selectivity>
<OutlierSelectivity>.563:</OutlierSelectivity>
<AverageFieldSize>.91</AverageFieldSize>
</Property>
<Property name="PeriodOfServiceIEN">
<Selectivity>3.2424%</Selectivity>
<OutlierSelectivity>.286667:7</OutlierSelectivity>
<AverageFieldSize>1.56</AverageFieldSize>
</Property>
<Property name="PreferredInstitutionIEN">
<Selectivity>0.1715%</Selectivity>
<OutlierSelectivity>.180667:</OutlierSelectivity>
<AverageFieldSize>2.75</AverageFieldSize>
</Property>
<Property name="PreferredInstitutionSource">
<Selectivity>11.0000%</Selectivity>
<OutlierSelectivity>.56:"ESR"</OutlierSelectivity>
<AverageFieldSize>3.07</AverageFieldSize>
</Property>
<Property name="PreferredInstitutionSourceCode">
<Selectivity>11.0000%</Selectivity>
<OutlierSelectivity>.56:"E"</OutlierSelectivity>
<AverageFieldSize>.84</AverageFieldSize>
</Property>
<Property name="PseudoSSNReason">
<Selectivity>0.0847%</Selectivity>
<OutlierSelectivity>.997333:</OutlierSelectivity>
<AverageFieldSize>.05</AverageFieldSize>
</Property>
<Property name="PseudoSSNReasonCode">
<Selectivity>0.0847%</Selectivity>
<OutlierSelectivity>.997333:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="RadiationExposureCode">
<Selectivity>0.0774%</Selectivity>
<OutlierSelectivity>.996667:</OutlierSelectivity>
<AverageFieldSize>.07</AverageFieldSize>
</Property>
<Property name="RadiationExposureCodeCode">
<Selectivity>0.0774%</Selectivity>
<OutlierSelectivity>.996667:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="ReligionIEN">
<Selectivity>1.4553%</Selectivity>
<OutlierSelectivity>.316:29</OutlierSelectivity>
<AverageFieldSize>1.71</AverageFieldSize>
</Property>
<Property name="SHADFlag">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="SHADFlagCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="SSNVerificationStatus">
<Selectivity>8.7666%</Selectivity>
<OutlierSelectivity>.824667:"VERIFIED"</OutlierSelectivity>
<AverageFieldSize>6.7</AverageFieldSize>
</Property>
<Property name="SSNVerificationStatusCode">
<Selectivity>8.7666%</Selectivity>
<OutlierSelectivity>.824667:4</OutlierSelectivity>
<AverageFieldSize>.84</AverageFieldSize>
</Property>
<Property name="ScrSSN">
<Selectivity>0.0002%</Selectivity>
<AverageFieldSize>9</AverageFieldSize>
</Property>
<Property name="SelfIdentifiedGender">
<Selectivity>2.0222%</Selectivity>
<OutlierSelectivity>.939333:</OutlierSelectivity>
<AverageFieldSize>.31</AverageFieldSize>
</Property>
<Property name="SelfIdentifiedGenderCode">
<Selectivity>2.0222%</Selectivity>
<OutlierSelectivity>.939333:</OutlierSelectivity>
<AverageFieldSize>.06</AverageFieldSize>
</Property>
<Property name="SensitiveFlag">
<Selectivity>3.9000%</Selectivity>
<OutlierSelectivity>.922:</OutlierSelectivity>
<AverageFieldSize>.08</AverageFieldSize>
</Property>
<Property name="SensitiveFlagCode">
<Selectivity>3.9000%</Selectivity>
<OutlierSelectivity>.922:</OutlierSelectivity>
<AverageFieldSize>.08</AverageFieldSize>
</Property>
<Property name="ServiceConnectedFlag">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="ServiceConnectedFlagCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="SouthwestAsiaCondition">
<Selectivity>8.3166%</Selectivity>
<OutlierSelectivity>.833667:"NO"</OutlierSelectivity>
<AverageFieldSize>1.7</AverageFieldSize>
</Property>
<Property name="SouthwestAsiaConditionCode">
<Selectivity>8.3166%</Selectivity>
<OutlierSelectivity>.833667:"N"</OutlierSelectivity>
<AverageFieldSize>.85</AverageFieldSize>
</Property>
<Property name="Sta3n">
<Selectivity>12.5000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="StateCountyIEN">
<Selectivity>0.7470%</Selectivity>
<OutlierSelectivity>.073667:4</OutlierSelectivity>
<AverageFieldSize>1.61</AverageFieldSize>
</Property>
<Property name="StateIEN">
<Selectivity>1.5094%</Selectivity>
<OutlierSelectivity>.139667:23</OutlierSelectivity>
<AverageFieldSize>1.87</AverageFieldSize>
</Property>
<Property name="StreetAddress1">
<Selectivity>0.0033%</Selectivity>
<AverageFieldSize>15.47</AverageFieldSize>
</Property>
<Property name="StreetAddress2">
<Selectivity>0.0042%</Selectivity>
<OutlierSelectivity>.866333:</OutlierSelectivity>
<AverageFieldSize>1.52</AverageFieldSize>
</Property>
<Property name="TestPatientFlag">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999667:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="TestPatientFlagCode">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999667:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="VeteranFlag">
<Selectivity>6.1833%</Selectivity>
<OutlierSelectivity>.876333:"Y"</OutlierSelectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="VeteranFlagCode">
<Selectivity>6.1833%</Selectivity>
<OutlierSelectivity>.876333:"Y"</OutlierSelectivity>
<AverageFieldSize>.99</AverageFieldSize>
</Property>
<Property name="VeteranTransportationProgramFlag">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="VeteranTransportationProgramFlagCode">
<Selectivity>0.0233%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="VietnamServiceFlag">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>.46</AverageFieldSize>
</Property>
<Property name="VietnamServiceFlagCode">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>.46</AverageFieldSize>
</Property>
<Property name="VistaCreateDate">
<Selectivity>0.0004%</Selectivity>
<OutlierSelectivity>.943:"1900-01-01 00:00:00"</OutlierSelectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<Property name="VistaEditDate">
<Selectivity>0.0098%</Selectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<Property name="Zip">
<Selectivity>0.0441%</Selectivity>
<AverageFieldSize>4.89</AverageFieldSize>
</Property>
<Property name="Zip4">
<Selectivity>0.0263%</Selectivity>
<AverageFieldSize>6.06</AverageFieldSize>
</Property>
<SQLMap name="MainIndex">
<BlockCount>-17331848</BlockCount>
</SQLMap>
<SQLMap name="PatientEnteredByStaffIENIndex">
<BlockCount>-224212</BlockCount>
</SQLMap>
<SQLMap name="PatientICNIndex">
<BlockCount>-216672</BlockCount>
</SQLMap>
<SQLMap name="PatientICNOnlyIndex">
<BlockCount>-425752</BlockCount>
</SQLMap>
<SQLMap name="PatientSSNIndex">
<BlockCount>-427812</BlockCount>
</SQLMap>
<SQLMap name="VistaEditDateIndex">
<BlockCount>-327056</BlockCount>
</SQLMap>
</Storage>

<Method name="NewVX130ToVISTA">
<ClassMethod>1</ClassMethod>
<FormalSpec>Sta3n:%Integer,StartIEN:%String=0,EndIEN:%Integer=""</FormalSpec>
<Implementation><![CDATA[
	Write Sta3n,!,$ZDateTime($H,3),!
	Set VistaSite=##class(VX130.VistaSite).%OpenId(Sta3n)
	Set NS=VistaSite.VistaSiteNamespace
	Set LastIEN=""
	Set Count=0
	Set:EndIEN="" EndIEN=$Order(^SPatient.SPatient2v123D(Sta3n,"%"),-1)
	Set PatientIEN=$Order(^SPatient.SPatient2v123D(Sta3n,StartIEN))
	While (PatientIEN]"")&(PatientIEN<EndIEN)
	{
		Set LastIEN=PatientIEN
		If $Get(^|NS|DPT(PatientIEN,0))=""
		{
			If ..%OpenId(Sta3n_"||"_$Replace(LastIEN,",","||")).OpCode']""
			{
				Set qcid=##class(QC.QualityCheckHistory).GetID("VX130",Sta3n,..%ClassName(1))
				Do ##class(QC.Detail).AddEntry(qcid,Sta3n_"||"_$Replace(LastIEN,",","||"),"1")
			}
		}
		Set PatientIEN=$Order(^SPatient.SPatient2v123D(Sta3n,PatientIEN))
		Set Count=Count+1
		If '(Count#10000) Do ##class(QC.QualityCheckHistory).UpdateDQStatus("VX130",Sta3n,..%ClassName(1),LastIEN)
	}
	Do ##class(QC.QualityCheckHistory).UpdateDQStatus("VX130",Sta3n,..%ClassName(1),LastIEN)
	Do ##class(QC.QualityCheckHistory).EndQualityCheck("VX130",Sta3n,..%ClassName(1))
	Quit
]]></Implementation>
</Method>

<Method name="ToFHIRObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
	Set oref=..%OpenId(id,0,.sc)
	Set jsonObj=##class(%DynamicObject).%New()
	If $IsObject(oref) {
		Set jsonObj.resourceType="Patient"
		Set jsonObj.identifier=oref.PatientICN
		set nameObj=##class(%DynamicObject).%New()
		set nameObj.use="official"
		set nameObj.text=oref.PatientName
		set nameObj.family=oref.PatientLastName
		set nameObj.given=##class(%DynamicArray).%New()
		set firstname=oref.PatientFirstName
		for i=1:1 { quit:$Piece(firstname," ",i)=""  do nameObj.given.%Push($Piece(firstname," ",i)) }
		set jsonObj.name=##class(%DynamicArray).%New()
		do jsonObj.name.%Push(nameObj)
		set gender=oref.GenderCode
		set jsonObj.gender=$case(gender,"M":"male","F":"female","O":"other",:"unknown")
		set jsonObj.birthdate=##class(%FilemanDate).LogicalToOdbc(oref.BirthDateTime)
		set:oref.DeathDateTime jsonObj.deceasedDateTime=##class(%FilemanDate).LogicalToOdbc(oref.DeathDateTime)
		do:oref.DeathDateTime="" jsonObj.%Set("deceasedBoolean",0,"boolean")
		
	}
	quit jsonObj
]]></Implementation>
</Method>

<Method name="CleanUp">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	kill Sta3n,PatientIEN,PatientFirstName,PatientLastName,PatientName,Gender,GenderCode,BirthDateTime,BirthFMDate,MaritalStatusIEN,ReligionIEN,DuplicateRecordStatus,DuplicateRecordStatusCode,DestinationMergePatientIEN,PatientSSN,ScrSSN,PseudoSSNReason,PseudoSSNReasonCode,SSNVerificationStatus,SSNVerificationStatusCode,PatientEnteredRemark,PatientEnteredByStaffIEN,PatientEnteredDateTime,PatientEnteredFMDate,PatientEnteredCode,PatientEnteredCodeCode,StreetAddress1,Zip4,StreetAddress2,City,StateIEN,Zip,StateCountyIEN,BadAddressIndicator,BadAddressIndicatorCode,CurrentMeansTestStatusIEN,IneligibleDateTime,IneligibleFMDate,PatientMissingDateTime,PatientMissingFMDate,IneligibleSource,IneligibleSourceCode,IneligibleCity,IneligibleStateIEN,IneligibleVAROReason,PatientMissingSource,PatientMissingSourceCode,PatientMissingCity,PatientMissingStateIEN,EmergencyResponseIndicator,EmergencyResponseIndicatorCode,ServiceConnectedFlag,ServiceConnectedFlagCode,PercentServiceConnect,IneligibleReason,FederalAgencyIEN,GovernmentEmployeeFlag,GovernmentEmployeeFlagCode,InsuranceCoverageFlag,InsuranceCoverageFlagCode,VietnamServiceFlag,VietnamServiceFlagCode,AgentOrangeExposureFlag,AgentOrangeExposureFlagCode,IonizingRadiationExposureFlag,IonizingRadiationExposureFlagCode,SHADFlag,SHADFlagCode,RadiationExposureCode,RadiationExposureCodeCode,AgentOrangeLocationCode,AgentOrangeLocationCodeCode,FilipinoVeteranCode,FilipinoVeteranCodeCode,SouthwestAsiaCondition,SouthwestAsiaConditionCode,PeriodOfServiceIEN,DeathDateTime,DeathFMDate,DeathEnteredByStaffIEN,DeathNotificationSource,DeathModifiedDateTime,DeathModifiedFMDate,DeathLastUpdatedByStaffIEN,CollateralSponsorPatientIEN,EligibilityIEN,EligibilityVACode,EligibilityStatus,EligibilityStatusCode,EligibilityStatusDateTime,EligibilityStatusFMDate,EligibilityVerificationSource,EligibilityVerificationSourceCode,EligibilityInterimDateTime,EligibilityInterimFMDate,EligibilityVerificationMethod,EligibilityEnteredStaffIEN,MedicaidEligibleFlag,MedicaidEligibleFlagCode,MedicaidInquireDateTime,MedicaidInquireFMDate,MedicaidNumber,POWFlag,POWFlagCode,POWLocationIEN,CombatFlag,CombatFlagCode,CombatFromDate,CombatFromFMDate,CombatToDate,CombatToFMDate,CombatEligibilityEndDate,CombatEligibilityEndFMDate,TestPatientFlag,TestPatientFlagCode,CurrentEnrollmentIEN,PreferredInstitutionIEN,PatientTypeIEN,PatientICN,FugitiveFelonFlag,FugitiveFelonFlagCode,FFFEnteredStaffIEN,FFFEnteredDateTime,FFFEnteredFMDate,FFFRemovedStaffIEN,FFFRemovedDateTime,FFFRemovedFMDate,FFFRemovedReason,VeteranFlag,VeteranFlagCode,ODSTreatmentDateTime,ODSTreatmentFMDate,ODSRecalledCode,ODSRecalledCodeCode,ODSRankType,OperationDesertShieldRank,SensitiveFlag,SensitiveFlagCode,PreferredInstitutionSource,PreferredInstitutionSourceCode,VeteranTransportationProgramFlag,VeteranTransportationProgramFlagCode,SelfIdentifiedGender,SelfIdentifiedGenderCode,DeathDocumentationType,OpCode,VistaCreateDate,VistaEditDate
	kill NS,Flag,LogEdits,SQLCODE,VistaSite,%objlasterror,%ROWCOUNT,BitFlag,id,oref
]]></Implementation>
</Method>
</Class>
</Export>