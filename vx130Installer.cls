Include %occInclude

Class vx130.Installer
{

XData VX130Manifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
   <SystemSetting Name="Config.config.MaxServers" Value="30" />
   <SystemSetting Name="Config.config.MaxServerConn" Value="30" />
   <SystemSetting Name="Config.Journal.CurrentDirectory" Value="/irisjrn/jrn" />
   <SystemSetting Name="Config.Journal.AlternateDirectory" Value="/irisjrn/alt" />
   <Namespace Name="vx130" Create="overwrite" Code="vx130code" Data="vx130data" Ensemble="0" >
     <Configuration>
       <Database Name="vx130code" Dir="/irisdb/vx130/vx130code/" Create="overwrite" />
       <Database Name="vx130data" Dir="/irisdb/vx130/vx130data/" Create="overwrite" />
     </Configuration>
   </Namespace>
   <Namespace  Name="%SYS" Create="no" Code="IRISSYS" Data="IRISSYS"  >
     <Invoke Class="vx130.Installer" Method="EnableECPService" CheckStatus="1" /> 
   </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger)  As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "VX130Manifest")
}
/// Enable the ECP Service for the vx130 system.
ClassMethod EnableECPService() As %Status
{
  set tsc = $$$OK
  try {
    set tService=##class(Security.Services).%OpenId("%service_ecp")
    if $ISOBJECT(tService) {
      set tService.Enabled=1
      set tsc=tService.%Save()
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}


}