Include %occInclude

Class vista.Installer
{

XData vistaManifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
   <SystemSetting Name="Config.config.MaxServers" Value="30" />
   <SystemSetting Name="Config.config.MaxServerConn" Value="30" />
   <SystemSetting Name="Config.Journal.CurrentDirectory" Value="/irisjrn/jrn" />
   <SystemSetting Name="Config.Journal.AlternateDirectory" Value="/irisjrn/alt" />
   <Namespace Name="VAH" Create="overwrite" Code="ROU" Data="ROU" Ensemble="0" >
     <Configuration>
       <Database Name="ROU" Dir="/irisdb/rou/" Create="overwrite" />
       <GlobalMapping Global="%Z*" From="ROU"/>
       <GlobalMapping Global="HLTMP" From="IRISTEMP"/>
       <GlobalMapping Global="TMP" From="IRISTEMP"/>
       <GlobalMapping Global="UTILITY" From="IRISTEMP"/>
       <GlobalMapping Global="XTMP" From="IRISTEMP"/>
       <GlobalMapping Global="XUTL" From="IRISTEMP"/>
       <RoutineMapping Routines="%DT*" Type="ALL" From="ROU" /> 
       <RoutineMapping Routines="%RCR" Type="ALL" From="ROU" /> 
       <RoutineMapping Routines="%XUCI" Type="ALL" From="ROU" /> 
       <RoutineMapping Routines="%Z*" Type="ALL" From="ROU" /> 
       <RoutineMapping Routines="%" Type="ALL" From="ROU" /> 
       <RoutineMapping Routines="%KIDS" Type="ALL" From="ROU" /> 
     </Configuration>
   </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger)  As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "vistaManifest")
}
}