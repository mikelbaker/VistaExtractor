Include %occInclude

Class flr.Installer
{

XData flrManifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
   <SystemSetting Name="Config.config.MaxServers" Value="30" />
   <SystemSetting Name="Config.config.MaxServerConn" Value="30" />
   <SystemSetting Name="Config.Journal.CurrentDirectory" Value="/irisjrn/jrn" />
   <SystemSetting Name="Config.Journal.AlternateDirectory" Value="/irisjrn/alt" />
   <Namespace  Name="%SYS" Create="no" Code="IRISSYS" Data="IRISSYS" Ensemble="0" >
     <Invoke Class="flr.Installer" Method="AddECPConnection" CheckStatus="1" />
     <Invoke Class="flr.Installer" Method="AddVX130RemoteDBs" CheckStatus="1" />
     <Invoke Class="flr.Installer" Method="AddV08RemoteDBs" CheckStatus="1" />
     <Invoke Class="flr.Installer" Method="AddFDWRemoteDBs" CheckStatus="1" />
   </Namespace>
   <Namespace Name="bay" Create="overwrite" Code="bay-rou" Data="bay-rou" Ensemble="0" >
     <Configuration>
       <GlobalMapping Global="%Z*" From="BAY-ROU"/>
     </Configuration>
   </Namespace>
   <Namespace Name="tam" Create="overwrite" Code="tam-rou" Data="tam-rou" Ensemble="0" >
     <Configuration>
       <GlobalMapping Global="%Z*" From="tam-ROU"/>
     </Configuration>
   </Namespace>
   <Namespace Name="wpb" Create="overwrite" Code="wpb-rou" Data="wpb-rou" Ensemble="0" >
     <Configuration>
       <GlobalMapping Global="%Z*" From="wpb-ROU"/>
     </Configuration>
   </Namespace>
   <Namespace Name="vx130" Create="overwrite" Code="vx130code" Data="vx130data" Ensemble="0" >
     <Configuration>
       <GlobalMapping Global="Dim*" From="fdw1"/>
       <GlobalMapping Global="SPatient*" From="fdwpriv"/>
       <ClassMapping Package="HS.SDA3" From="HSLIB"/>
     </Configuration>
   </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "flrManifest")
}

// Add ECP connection to VX130 for the flr system.

ClassMethod AddECPConnection() As %Status
{
  set tsc = $$$OK
  try {
    for tName="v08","fdw" {
      if ##Class(Config.ECPServers).Exists(tName,.Obj) {
          do ##class(%SYS.System).WriteToConsoleLog(tName_" ECP connection is already configured.")
        } else {
          set tProperties("Address")=tName
          set tProperties("Port")="1972"
          set tsc=##Class(Config.ECPServers).Create(tName,.tProperties)
        }
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

// Add Remote databases to VX130 for the flr system.

ClassMethod AddVX130RemoteDBs() As %Status
{
  set tsc = $$$OK
  try {
    for tName="vx130code","vx130data"
    {
      if ##Class(Config.Databases).Exists(tName,.Obj) {
        do ##class(%SYS.System).WriteToConsoleLog(tName_" is already configured.")
      } else {
        set tProperties("Directory")="/irisdb/vx130/"_tName_"/"
        set tProperties("Server")="fdw"
        set tsc=##Class(Config.Databases).Create(tName,.tProperties)
      }
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

// Add Remote databases to v08 for the flr system.

ClassMethod AddV08RemoteDBs() As %Status
{
  set tsc = $$$OK
  try {
    for tName="bay-rou","tam-rou","wpb-rou"
    {
      if ##Class(Config.Databases).Exists(tName,.Obj) {
        do ##class(%SYS.System).WriteToConsoleLog(tName_" is already configured.")
      } else {
        set tProperties("Directory")="/irisdb/v08/"_$PIECE(tName,"-",1)_"/rou/"
        set tProperties("Server")="v08"
        set tsc=##Class(Config.Databases).Create(tName,.tProperties)
      }
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

// Add Remote databases to v08 for the flr system.

ClassMethod AddFDWRemoteDBs() As %Status
{
  set tsc = $$$OK
  try {
    for tName="fdw1","fdwpriv"
    {
      if ##Class(Config.Databases).Exists(tName,.Obj) {
        do ##class(%SYS.System).WriteToConsoleLog(tName_" is already configured.")
      } else {
        set tProperties("Directory")="/irisdb/fdw/"_tName_"/"
        set tProperties("Server")="fdw"
        set tsc=##Class(Config.Databases).Create(tName,.tProperties)
      }
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

// Add VX130 Namespace for the AsyncRO system.

ClassMethod AddVX130Namespace() As %Status
{
  set tsc = $$$OK
  try {
    if ##Class(Config.Namespaces).Exists("VX130",.Obj) {
      do ##class(%SYS.System).WriteToConsoleLog("VX130 Namespace is already configured.")
    } else {
      set tProperties("Routines")="vx130code"
      set tProperties("Globals")="vx130data"
      set tsc=##Class(Config.Namespaces).Create("VX130",.tProperties)
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

/// Description
ClassMethod AddAPI() As %Status
{
  Set tSC = $$$OK
  Try {
    set name="/api/cb"
    set app=##class(Security.Applications).%OpenId(name)
    if '$ISOBJECT(app)
    {
      set Properties("AutheEnabled")=32
      set Properties("CSPZENEnabled")=1
      set Properties("Description")="ClassBuilder REST APIs"
      set Properties("DispatchClass")="CB.ClassBuilderREST"
      set Properties("Enabled")=1
      set Properties("NameSpace")="VX130"
      set tSC=##class(Security.Applications).Create(name,.Properties)
    }
  }
  Catch ex {
    Set tSC=ex.AsStatus()
  }
  Return tSC
}

}
