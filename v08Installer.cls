Include %occInclude

Class v08.Installer
{

XData v08Manifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
   <SystemSetting Name="Config.config.MaxServers" Value="30" />
   <SystemSetting Name="Config.config.MaxServerConn" Value="30" />
   <SystemSetting Name="Config.Journal.CurrentDirectory" Value="/irisjrn/jrn" />
   <SystemSetting Name="Config.Journal.AlternateDirectory" Value="/irisjrn/alt" />
   <Namespace Name="bay" Create="overwrite" Code="bay-rou" Data="bay-rou" Ensemble="0" >
     <Configuration>
       <Database Name="bay-rou" Dir="/irisdb/v08/bay/rou/" Create="overwrite" />
       <GlobalMapping Global="%Z*" From="BAY-ROU"/>
       <GlobalMapping Global="HLTMP" From="IRISTEMP"/>
       <GlobalMapping Global="TMP" From="IRISTEMP"/>
       <GlobalMapping Global="UTILITY" From="IRISTEMP"/>
       <GlobalMapping Global="XTMP" From="IRISTEMP"/>
       <GlobalMapping Global="XUTL" From="IRISTEMP"/>
     </Configuration>
   </Namespace>
   <Namespace Name="tam" Create="overwrite" Code="tam-rou" Data="tam-rou" Ensemble="0" >
     <Configuration>
       <Database Name="tam-rou" Dir="/irisdb/v08/tam/rou/" Create="overwrite" />
       <GlobalMapping Global="%Z*" From="tam-ROU"/>
       <GlobalMapping Global="HLTMP" From="IRISTEMP"/>
       <GlobalMapping Global="TMP" From="IRISTEMP"/>
       <GlobalMapping Global="UTILITY" From="IRISTEMP"/>
       <GlobalMapping Global="XTMP" From="IRISTEMP"/>
       <GlobalMapping Global="XUTL" From="IRISTEMP"/>
     </Configuration>
   </Namespace>
   <Namespace Name="wpb" Create="overwrite" Code="wpb-rou" Data="wpb-rou" Ensemble="0" >
     <Configuration>
       <Database Name="wpb-rou" Dir="/irisdb/v08/wpb/rou/" Create="overwrite" />
       <GlobalMapping Global="%Z*" From="wpb-ROU"/>
       <GlobalMapping Global="HLTMP" From="IRISTEMP"/>
       <GlobalMapping Global="TMP" From="IRISTEMP"/>
       <GlobalMapping Global="UTILITY" From="IRISTEMP"/>
       <GlobalMapping Global="XTMP" From="IRISTEMP"/>
       <GlobalMapping Global="XUTL" From="IRISTEMP"/>
     </Configuration>
   </Namespace>
   <Namespace  Name="%SYS" Create="no" Code="IRISSYS" Data="IRISSYS"  >
     <Invoke Class="v08.Installer" Method="EnableMirrorService" CheckStatus="1" />
     <Invoke Class="v08.Installer" Method="EnableECPService" CheckStatus="1" />
     <Invoke Class="v08.Installer" Method="AddVX130ECPConnection" CheckStatus="1" />
     <Invoke Class="v08.Installer" Method="AddVX130RemoteDBs" CheckStatus="1" />
     <Invoke Class="v08.Installer" Method="AddVX130Namespace" CheckStatus="1" />
   </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "v08Manifest")
}

/// Enable the Mirror Service for the AsyncRO system.
ClassMethod EnableMirrorService() As %Status
{
  set tsc = $$$OK
  try {
    set tService=##class(Security.Services).%OpenId("%service_mirror")
    if $ISOBJECT(tService) {
      set tService.Enabled=1
      set tsc=tService.%Save()
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

// Enable the ECP Service for the AsyncRO system.

ClassMethod EnableECPService() As %Status
{
  set tsc = $$$OK
  try {
    set tService=##class(Security.Services).%OpenId("%service_ecp")
    if $ISOBJECT(tService) {
      set tService.Enabled=1
      set tsc=tService.%Save()
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

// Add ECP connection to VX130 for the AsyncRO system.

ClassMethod AddVX130ECPConnection() As %Status
{
  set tsc = $$$OK
  try {
    if ##Class(Config.ECPServers).Exists("vx130",.Obj) {
        do ##class(%SYS.System).WriteToConsoleLog("vx130 ECP connection is already configured.")
      } else {
        set tProperties("Address")="fdw"
        set tProperties("Port")="1972"
        set tsc=##Class(Config.ECPServers).Create("vx130",.tProperties)
      }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

// Add Remote databases to VX130 for the AsyncRO system.

ClassMethod AddVX130RemoteDBs() As %Status
{
  set tsc = $$$OK
  try {
    for tName="vx130code","vx130data"
    {
      if ##Class(Config.Databases).Exists(tName,.Obj) {
        do ##class(%SYS.System).WriteToConsoleLog(tName_" is already configured.")
      } else {
        set tProperties("Directory")="/irisdb/vx130/"_tName_"/"
        set tProperties("Server")="vx130"
        set tsc=##Class(Config.Databases).Create(tName,.tProperties)
      }
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

// Add VX130 Namespace for the AsyncRO system.

ClassMethod AddVX130Namespace() As %Status
{
  set tsc = $$$OK
  try {
    if ##Class(Config.Namespaces).Exists("VX130",.Obj) {
      do ##class(%SYS.System).WriteToConsoleLog("VX130 Namespace is already configured.")
    } else {
      set tProperties("Routines")="vx130code"
      set tProperties("Globals")="vx130data"
      set tsc=##Class(Config.Namespaces).Create("VX130",.tProperties)
    }
  }
  catch ex {
    set tsc=ex.AsStatus()
  }
  return tsc
}

/// Description
ClassMethod ActivateMirrorDBs() As %Status
{
  Set tsc = $$$OK
  try {
    set tStatement = ##class(%SQL.Statement).%New()
    set tsc = tStatement.%PrepareClassQuery("SYS.Database","List")
    set tSFN=""
    set tRset = tStatement.%Execute()
    while tRset.%Next() { 
      if tRset.%Get("Directory")["rou" {
        set tsc=##class(SYS.Mirror).CatchupDB($LISTBUILD(tRset.%Get("SFN")))
      }
    }

  } catch ex {
    set tsc=ex.AsStatus()
  }
  Return tsc
}

}
